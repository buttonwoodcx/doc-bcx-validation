define("app",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.App=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.configureRouter=function(e,t){this.router=t,e.title="bcx-aurelia-dnd examples",e.mapUnknownRoutes("not-found.html"),e.map([{route:"",redirect:"intro"},{route:"intro",name:"intro",title:"Introduction",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"tutorial/intro.html"},{route:"tutorial/foreach-and-nested",name:"tutorial/foreach-and-nested",title:"Foreach and nested",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e2-foreach-and-nested/index"},{route:"tutorial/number-and-conditional",name:"tutorial/number-and-conditional",title:"Number and conditional",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e3-number-and-conditional/index"},{route:"tutorial/email-and-password",name:"tutorial/email-and-password",title:"Email and password",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e4-email-and-password/index"},{route:"tutorial/foreach-switch-and-customise",name:"tutorial/foreach-switch-and-customise",title:"Foreach, switch and customise",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e5-foreach-switch-and-customise/index"},{route:"tutorial/foreach-and-conditional",name:"tutorial/foreach-and-conditional",title:"Foreach and conditional",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e6-foreach-and-conditional/index"},{route:"tutorial/i18n",name:"tutorial/i18n",title:"I18N",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e7-i18n/index"},{route:"tutorial/merge-server-side-error",name:"tutorial/merge-server-side-error",title:"Merge server side error",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e8-merge-server-side-error/index"},{route:"tutorial/warnings-and-errors",name:"tutorial/warnings-and-errors",title:"Warnings and errors",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e9-warnings-and-errors/index"},{route:"tutorial/validator-composition",name:"tutorial/validator-composition",title:"Validator composition",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e10-validator-composition/index"},{route:"tutorial/validator-function",name:"tutorial/validator-function",title:"Validator function",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"examples/e11-validator-function/index"},{route:"tutorial/wip",name:"tutorial/wip",title:"[WIP]",nav:!0,settings:{section:"Tutorial by examples"},moduleId:"wip.html"},{route:"reference/standard-validators",name:"reference/standard-validators",title:"Standard validators",nav:!0,settings:{section:"Standard features"},moduleId:"reference/standard-validators.html"},{route:"reference/standard-transformers",name:"reference/standard-transformers",title:"Standard transformers",nav:!0,settings:{section:"Standard features"},moduleId:"reference/standard-transformers.html"},{route:"reference/overview",name:"reference/overview",title:"Overview",nav:!0,settings:{section:"Reference"},moduleId:"reference/overview.html"},{route:"reference/basic-shape-of-a-rule",name:"reference/basic-shape-of-a-rule",title:"Basic shape of a rule",nav:!0,settings:{section:"Reference"},moduleId:"reference/basic-shape-of-a-rule.html"},{route:"reference/raw-function-as-rule",name:"reference/raw-function-as-rule",title:"Raw function as rule",nav:!0,settings:{section:"Reference"},moduleId:"reference/raw-function-as-rule.html"},{route:"reference/chain-of-rules",name:"reference/chain-of-rules",title:"Chain of rules",nav:!0,settings:{section:"Reference"},moduleId:"reference/chain-of-rules.html"},{route:"reference/if-transformer",name:"reference/if-transformer",title:"Conditional validation",nav:!0,settings:{section:"Reference"},moduleId:"reference/if-transformer.html"},{route:"reference/validator-composition",name:"reference/validator-composition",title:"Validator composition",nav:!0,settings:{section:"Reference"},moduleId:"reference/validator-composition.html"},{route:"reference/nested-rule",name:"reference/nested-rule",title:"Nested rule",nav:!0,settings:{section:"Reference"},moduleId:"reference/nested-rule.html"},{route:"reference/transformer-rule",name:"reference/transformer-rule",title:"Transformer rule",nav:!0,settings:{section:"Reference"},moduleId:"reference/transformer-rule.html"},{route:"reference/switch-transformer",name:"reference/switch-transformer",title:"Switch transformer",nav:!0,settings:{section:"Reference"},moduleId:"reference/switch-transformer.html"},{route:"reference/foreach-transformer",name:"reference/foreach-transformer",title:"Foreach transformer",nav:!0,settings:{section:"Reference"},moduleId:"reference/foreach-transformer.html"},{route:"reference/add-helper-for-expression",name:"reference/add-helper-for-expression",title:"Add helper",nav:!0,settings:{section:"Reference"},moduleId:"reference/add-helper-for-expression.html"}])},e}()}),define("text!app.css",["module"],function(e){e.exports=".form-field > label{\n  display: block;\n  font-size: .85rem;\n}\n\n.form-field > input,\n.form-field > text-area,\n.form-field > select {\n  font-size: .85rem;\n  display: block;\n  border: 1px solid #888;\n  width: 100%;\n}\n\n.form-field.in-valid > label {\n  color: #DD6163;\n}\n\n.form-field.in-valid > input,\n.form-field.in-valid > text-area,\n.form-field.in-valid > select {\n  border-color: #DD6163;\n}\n\n.form-field.warning > label {\n  color: #FECD3D;\n}\n\n.form-field.warning > input,\n.form-field.warning > text-area,\n.form-field.warning > select {\n  border-color: #FECD3D;\n}\n\n.form-field {\n  display: block;\n  margin-bottom: .2rem;\n}\n\n.form-field > .field-error {\n  font-size: .7rem;\n  color: #DD6163\n}\n\n.form-field > .field-warning {\n  font-size: .7rem;\n  color: #FECD3D\n}\n\n.demo-columns {\n  display: flex;\n  align-items: stretch;\n  flex-wrap: wrap;\n}\n\n.demo-columns > * {\n  flex: 0 1 auto;\n  min-width: 200px;\n  margin: 5px;\n}\n\n.demo-columns.equal-size > * {\n  flex: 1 0 0;\n  max-width: 300px;\n  min-width: 50px;\n}\n\ntable.table-fixed-size {\n  table-layout: fixed;\n}\n\n.debug-errors {\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.debug-errors pre {\n  font-size: .75rem;\n}\n\ntable.form-table tr td {\n  vertical-align: text-top;\n}\n\nbutton {\n  font-size: .85rem;\n}"}),define("text!app.html",["module"],function(e){e.exports='<template>\n  <require from="bcx-doc-base/css/doc.css"></require>\n  <require from="./app.css"></require>\n\n  <bcx-doc-nav router.bind="router">\n    <div slot="top">\n      <h5><em>Github Repo</em></h5>\n      <a href="https://github.com/buttonwoodcx/bcx-validation" class="link remote-link">bcx-validation v0.3.3</a>\n    </div>\n  </bcx-doc-nav>\n\n  <div class="bcx-doc-main" as-element="router-view"></div>\n</template>\n'}),define("environment",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={debug:!1,testing:!1}}),define("examples/e1-introduction/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e1-introduction/simple-form.js","src/examples/e1-introduction/simple-form.html"]}}),define("text!examples/e1-introduction/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app" style="min-height: 420px;">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e1-introduction/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c,m=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function p(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("triedSubmit","model.name","model.email"),d=(0,t.computedFrom)("errors"),s((p((c=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.model={name:"",email:""},this.validate=e.generateValidator({name:"mandatory",email:["mandatory","email"]})}return t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},m(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}}]),t}()).prototype,"errors",[l],Object.getOwnPropertyDescriptor(c.prototype,"errors"),c.prototype),p(c.prototype,"hasError",[d],Object.getOwnPropertyDescriptor(c.prototype,"hasError"),c.prototype),u=c))||u)}),define("text!examples/e1-introduction/simple-form.html",["module"],function(e){e.exports='<template>\n\n  <form submit.trigger="save()">\n    <div class="form-field ${errors.name ? \'in-valid\' : \'\'}">\n      <label>Name</label>\n      <input type="text" value.bind="model.name">\n      <div class="field-error" repeat.for="err of errors.name">${err}</div>\n    </div>\n\n    <div class="form-field ${errors.email ? \'in-valid\' : \'\'}">\n      <label>Email</label>\n      <input type="text" value.bind="model.email">\n      <div class="field-error" repeat.for="err of errors.email">${err}</div>\n    </div>\n\n    <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n  </form>\n\n  <div class="debug-errors">\n    <span>The errors object:</span>\n    <pre>${errors | json:2}</pre>\n  </div>\n</template>'}),define("examples/e10-validator-composition/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e10-validator-composition/simple-form.js","src/examples/e10-validator-composition/simple-form.html"]}}),define("text!examples/e10-validator-composition/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e10-validator-composition/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c,m=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function p(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("triedSubmit","model.label","model.phone"),d=(0,t.computedFrom)("errors"),s((p((c=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.model={label:"",phone:""},e.addValidator("australiaPhone",[{validate:"passImmediatelyIf",value:/^(000|106|112)$/},{switch:"$value.substr(0,2)",cases:{13:{validate:/^13(\d{4}|\d{6})$/,message:"not a valid 13 xx xx number"},18:[{if:"$value.startsWith('1800')",validate:/^1800\d{6}$/,message:"not a valid 1800 xxx xxx number",stopValidationChainIfFail:!0,stopValidationChainIfPass:!0},{if:"$value.startsWith('180') || $value.startsWith('188') || $value.startsWith('189')",validate:/^18\d\d{4}$/,message:"not a valid ${$value.substr(0,3)} xxxx number"}],"02":{validate:/^\d{10}$/,message:"not a valid land number"},"03":{validate:/^\d{10}$/,message:"not a valid land number"},"07":{validate:/^\d{10}$/,message:"not a valid land number"},"08":{validate:/^\d{10}$/,message:"not a valid land number"},"04":{validate:/^\d{10}$/,message:"not a valid mobile number"},"05":{validate:/^\d{10}$/,message:"not a valid mobile number"}},default:{validate:"isTrue",value:"false",message:"not a valid number"}}]),this.validate=e.generateValidator({label:"mandatory",phone:["mandatory","australiaPhone"]})}return t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},m(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}}]),t}()).prototype,"errors",[l],Object.getOwnPropertyDescriptor(c.prototype,"errors"),c.prototype),p(c.prototype,"hasError",[d],Object.getOwnPropertyDescriptor(c.prototype,"hasError"),c.prototype),u=c))||u)}),define("text!examples/e10-validator-composition/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n\n    <form submit.trigger="save()">\n      <form-field label="Label"\n                  value.bind="model.label"\n                  errors.bind="errors.label"></form-field>\n      <form-field label="Australia Phone"\n                  value.bind="model.phone"\n                  errors.bind="errors.phone"></form-field>\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e11-validator-function/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e11-validator-function/simple-form.js","src/examples/e11-validator-function/simple-form.html"]}}),define("text!examples/e11-validator-function/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e11-validator-function/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c,m=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function p(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("triedSubmit","model.label","model.phone"),d=(0,t.computedFrom)("errors"),s((p((c=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.model={label:"",phone:""},e.addValidator("australiaPhone",function(e){if(!e.match(/^(000|106|112)$/))if(e.startsWith("13")){if(!e.match(/^13(\d{4}|\d{6})$/))return"not a valid 13 xx xx number"}else if(e.startsWith("1800")){if(!e.match(/^1800\d{6}$/))return"not a valid 1800 xxx xxx number"}else if(e.startsWith("180")||e.startsWith("188")||e.startsWith("189")){if(!e.match(/^18\d\d{4}$/))return"not a valid "+e.substr(0,3)+" xxxx number"}else{var t=e.substr(0,2);if("02"===t||"03"===t||"07"===t||"08"===t){if(!e.match(/^\d{10}$/))return"not a valid land number"}else{if("04"!==t&&"05"!==t)return"not a valid number";if(!e.match(/^\d{10}$/))return"not a valid mobile number"}}}),this.validate=e.generateValidator({label:"mandatory",phone:["mandatory","australiaPhone"]})}return t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},m(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}}]),t}()).prototype,"errors",[l],Object.getOwnPropertyDescriptor(c.prototype,"errors"),c.prototype),p(c.prototype,"hasError",[d],Object.getOwnPropertyDescriptor(c.prototype,"hasError"),c.prototype),u=c))||u)}),define("text!examples/e11-validator-function/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n\n    <form submit.trigger="save()">\n      <form-field label="Label"\n                  value.bind="model.label"\n                  errors.bind="errors.label"></form-field>\n      <form-field label="Australia Phone"\n                  value.bind="model.phone"\n                  errors.bind="errors.phone"></form-field>\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e2-foreach-and-nested/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e2-foreach-and-nested/simple-form.js","src/examples/e2-foreach-and-nested/simple-form.html","src/resources/elements/form-field.js","src/resources/elements/form-field.html","src/resources/binding-behaviors/number.js"]}}),define("text!examples/e2-foreach-and-nested/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e2-foreach-and-nested/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();var m,p,f,v,h,b;e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("errors"),s((u=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.model={name:"",email:"",agreeTerm:!1,address:{line1:"",line2:"",suburb:"",state:"",postcode:""},phoneNumbers:[{label:"Home",value:""}]},this.phoneNumberTypes=["Home","Mobile","Office"],this.auStates=["ACT","NSW","NT","QLD","SA","TAS","VIC","WA"],this.validate=e.generateValidator({name:"mandatory",email:["notMandatory","email"],agreeTerm:{validate:"isTrue",message:"you must to agree our term before continue"},address:{line1:"mandatory",suburb:"mandatory",state:{validate:"within",items:["ACT","NSW"],message:"sorry, at this moment, we do not support business outside of ACT and NSW"},postcode:["mandatory",{validate:/^\d{4}$/,message:"not valid postcode"}]},phoneNumbers:{foreach:{label:["mandatory","unique"],value:["mandatory",{validate:/^\d{4,}$/,message:"not valid phone number"}]}}})}return t.prototype.addPhoneNumber=function(){this.model.phoneNumbers.push({label:"Home",value:""})},t.prototype.removePhoneNumber=function(e){this.model.phoneNumbers.splice(e,1)},t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},c(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}}]),t}(),m=u.prototype,p="hasError",f=[l],v=Object.getOwnPropertyDescriptor(u.prototype,"hasError"),h=u.prototype,b={},Object.keys(v).forEach(function(e){b[e]=v[e]}),b.enumerable=!!b.enumerable,b.configurable=!!b.configurable,("value"in b||b.initializer)&&(b.writable=!0),b=f.slice().reverse().reduce(function(e,t){return t(m,p,e)||e},b),h&&void 0!==b.initializer&&(b.value=b.initializer?b.initializer.call(h):void 0,b.initializer=void 0),void 0===b.initializer&&(Object.defineProperty(m,p,b),b=null),d=u))||d)}),define("text!examples/e2-foreach-and-nested/simple-form.html",["module"],function(e){e.exports='<template>\n  \x3c!-- from now on, custom element <form-field> is used for all rest examples--\x3e\n\n  <div class="demo-columns">\n    <form submit.trigger="save()">\n      <div class="demo-columns equal-size">\n        <div>\n          <form-field label="Name"\n                      value.bind="model.name"\n                      errors.bind="errors.name"></form-field>\n          <form-field label="Email"\n                      value.bind="model.email"\n                      errors.bind="errors.email"\n                      placeholder="optional"></form-field>\n          <form-field label="agree our term?"\n                      type="boolean"\n                      value.bind="model.agreeTerm"\n                      errors.bind="errors.agreeTerm"></form-field>\n\n          <p>Phone numbers <button click.trigger="addPhoneNumber()" if.bind="model.phoneNumbers.length < 3">+</button></p>\n\n          <table class="form-table">\n            <tr repeat.for="phoneNumber of model.phoneNumbers">\n              <td style="width: 40%;">\n                <form-field value.bind="phoneNumber.label"\n                            errors.bind="errors.phoneNumbers[$index].label"\n                            type="select"\n                            options.bind="phoneNumberTypes"></form-field>\n              </td>\n              <td colspan.bind="$first ? 2 : 1">\n                <form-field value.bind="phoneNumber.value"\n                            errors.bind="errors.phoneNumbers[$index].value"\n                            placeholder="phone number"></form-field>\n              </td>\n              <td if.bind="!$first">\n                <button click.trigger="removePhoneNumber($index)">X</button>\n              </td>\n            </tr>\n          </table>\n        </div>\n        <div style="width:150px">\n          <form-field label="Address line1"\n                      value.bind="model.address.line1"\n                      errors.bind="errors.address.line1"></form-field>\n          <form-field label="Address line2"\n                      value.bind="model.address.line2"\n                      errors.bind="errors.address.line2"></form-field>\n          <form-field label="Suburb"\n                      value.bind="model.address.suburb"\n                      errors.bind="errors.address.suburb"></form-field>\n          <form-field label="Postcode"\n                      value.bind="model.address.postcode"\n                      errors.bind="errors.address.postcode"\n                      placeholder="4 digits postcode"></form-field>\n          <form-field label="State (in Australia)"\n                      value.bind="model.address.state"\n                      type="select"\n                      options.bind="auStates"\n                      errors.bind="errors.address.state"></form-field>\n        </div>\n      </div>\n\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>'}),define("examples/e3-number-and-conditional/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e3-number-and-conditional/simple-form.js","src/examples/e3-number-and-conditional/simple-form.html","src/resources/binding-behaviors/number.js","src/resources/elements/form-field.js","src/resources/elements/form-field.html"]}}),define("text!examples/e3-number-and-conditional/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e3-number-and-conditional/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c,m=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function p(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("triedSubmit","model.cpu","model.memory","model.disk","model.willHostJava"),d=(0,t.computedFrom)("errors"),s((p((c=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.model={cpu:1,memory:512,disk:10,willHostJava:!0},this.validate=e.generateValidator({cpu:["mandatory",{validate:"number",min:1,max:64}],memory:["mandatory",{if:"willHostJava",validate:"number",min:2048,message:"are you kidding me, ${$value}MB for Java?! you need at least 2048MB",stopValidationChainIfFail:!0},{validate:"number",min:256,max:65536}],disk:["mandatory",{validate:"number",min:10,max:1e3}]})}return t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},m(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}}]),t}()).prototype,"errors",[l],Object.getOwnPropertyDescriptor(c.prototype,"errors"),c.prototype),p(c.prototype,"hasError",[d],Object.getOwnPropertyDescriptor(c.prototype,"hasError"),c.prototype),u=c))||u)}),define("text!examples/e3-number-and-conditional/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n    <form submit.trigger="save()">\n      \x3c!-- type="number" uses binding-behavior "number" undernearth --\x3e\n      <form-field label="CPU"\n                  value.bind="model.cpu"\n                  type="number"\n                  integer-only.bind="true"\n                  errors.bind="errors.cpu"></form-field>\n      <form-field label="Memory (MB)"\n                  value.bind="model.memory"\n                  type="number"\n                  integer-only.bind="true"\n                  errors.bind="errors.memory"></form-field>\n      <form-field label="Disk (GB)"\n                  value.bind="model.disk"\n                  type="number"\n                  integer-only.bind="true"\n                  errors.bind="errors.disk"></form-field>\n      <form-field label="will host Java?"\n                  type="boolean"\n                  value.bind="model.willHostJava"\n                  errors.bind="errors.willHostJava"></form-field>\n\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e4-email-and-password/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e4-email-and-password/simple-form.js","src/examples/e4-email-and-password/simple-form.html"]}}),define("text!examples/e4-email-and-password/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e4-email-and-password/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c,m=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function p(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("triedSubmit","model.username","model.password","model.confirmPassword"),d=(0,t.computedFrom)("errors"),s((p((c=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.model={username:"",password:"",confirmPassword:""},this.validate=e.generateValidator({username:["mandatory","email"],password:["mandatory",{validate:"password",minLength:8,alphabet:!0,mixCase:!0,digit:!0,specialChar:!0}],confirmPassword:{validate:"isTrue",value:"$value === password",message:"passwords do not match!"}})}return t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},m(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}}]),t}()).prototype,"errors",[l],Object.getOwnPropertyDescriptor(c.prototype,"errors"),c.prototype),p(c.prototype,"hasError",[d],Object.getOwnPropertyDescriptor(c.prototype,"hasError"),c.prototype),u=c))||u)}),define("text!examples/e4-email-and-password/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n    <form submit.trigger="save()">\n      <form-field label="Username (email)"\n                  value.bind="model.username"\n                  errors.bind="errors.username"></form-field>\n      <form-field label="Password"\n                  type="password"\n                  value.bind="model.password"\n                  errors.bind="errors.password"></form-field>\n      <form-field label="Confirm Password"\n                  type="password"\n                  value.bind="model.confirmPassword"\n                  errors.bind="errors.confirmPassword"></form-field>\n\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e5-foreach-switch-and-customise/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e5-foreach-switch-and-customise/simple-form.js","src/examples/e5-foreach-switch-and-customise/simple-form.html"]}}),define("text!examples/e5-foreach-switch-and-customise/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e5-foreach-switch-and-customise/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();var m,p,f,v,h,b;e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("errors"),s((u=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.users=[{type:"dealer",id:"#0",name:"Bob",phone:""}],this.typeOptions=[{value:"dealer",label:"Dealer"},{value:"customer",label:"Customer"}],e.addValidator("phone",{validate:/^\d{4,10}$/,message:"not a valid phone number"}),this.validate=e.generateValidator({key:"id",foreach:[{name:["mandatory","unique"],id:["mandatory","unique"],type:["mandatory",{validate:"within",items:["dealer","customer"]}]},{switch:"type",cases:{dealer:{phone:[{validate:"mandatory",message:"mandatory for dealer"},"phone"]},customer:{phone:["notMandatory","phone"]}}}]})}return t.prototype.addUser=function(){this.users.push({type:"customer",id:"#"+this.users.length,name:"",phone:""})},t.prototype.removeUser=function(t){var e=this.users.findIndex(function(e){return e.id===t});-1!==e&&this.users.splice(e,1)},t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.users).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},c(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.users)}},{key:"hasError",get:function(){return!!this.errors}}]),t}(),m=u.prototype,p="hasError",f=[l],v=Object.getOwnPropertyDescriptor(u.prototype,"hasError"),h=u.prototype,b={},Object.keys(v).forEach(function(e){b[e]=v[e]}),b.enumerable=!!b.enumerable,b.configurable=!!b.configurable,("value"in b||b.initializer)&&(b.writable=!0),b=f.slice().reverse().reduce(function(e,t){return t(m,p,e)||e},b),h&&void 0!==b.initializer&&(b.value=b.initializer?b.initializer.call(h):void 0,b.initializer=void 0),void 0===b.initializer&&(Object.defineProperty(m,p,b),b=null),d=u))||d)}),define("text!examples/e5-foreach-switch-and-customise/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n    <form submit.trigger="save()" style="max-width: 400px;">\n      Users\n      <button if.bind="users.length < 5"\n              click.trigger="addUser()">+</button>\n      <table class="form-table">\n        <tr repeat.for="user of users">\n          <td style="width: 35%;">\n            <form-field type="select"\n                        value.bind="user.type"\n                        options.bind="typeOptions"\n                        errors.bind="errors.type"></form-field>\n          </td>\n          <td>\n            <form-field value.bind="user.name"\n                        errors.bind="errors[user.id].name"\n                        placeholder="Name"></form-field>\n          </td>\n          <td colspan.bind="$first ? 2 : 1">\n            <form-field value.bind="user.phone"\n                        errors.bind="errors[user.id].phone"\n                        placeholder="Phone"></form-field>\n          </td>\n          <td if.bind="!$first">\n            <button click.trigger="removeUser(user.id)">X</button>\n          </td>\n        </tr>\n      </table>\n\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e6-foreach-and-conditional/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e6-foreach-and-conditional/simple-form.js","src/examples/e6-foreach-and-conditional/simple-form.html"]}}),define("text!examples/e6-foreach-and-conditional/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e6-foreach-and-conditional/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();var m,p,f,v,h,b;e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("errors"),s((u=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.users=[{type:"dealer",id:"#0",name:"Bob",phone:""}],this.typeOptions=[{value:"dealer",label:"Dealer"},{value:"customer",label:"Customer"}],e.addValidator("phone",{validate:/^\d{4,10}$/,message:"not a valid phone number"}),this.validate=e.generateValidator({key:"id",foreach:{name:["mandatory","unique"],phone:[{if:'type === "dealer"',validate:"mandatory",message:"mandatory for dealer"},{if:'type === "customer"',validate:"notMandatory"},"phone"],id:["mandatory","unique"],type:["mandatory",{validate:"within",items:["dealer","customer"]}]}})}return t.prototype.addUser=function(){this.users.push({type:"customer",id:"#"+this.users.length,name:"",phone:""})},t.prototype.removeUser=function(t){var e=this.users.findIndex(function(e){return e.id===t});-1!==e&&this.users.splice(e,1)},t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.users).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},c(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.users)}},{key:"hasError",get:function(){return!!this.errors}}]),t}(),m=u.prototype,p="hasError",f=[l],v=Object.getOwnPropertyDescriptor(u.prototype,"hasError"),h=u.prototype,b={},Object.keys(v).forEach(function(e){b[e]=v[e]}),b.enumerable=!!b.enumerable,b.configurable=!!b.configurable,("value"in b||b.initializer)&&(b.writable=!0),b=f.slice().reverse().reduce(function(e,t){return t(m,p,e)||e},b),h&&void 0!==b.initializer&&(b.value=b.initializer?b.initializer.call(h):void 0,b.initializer=void 0),void 0===b.initializer&&(Object.defineProperty(m,p,b),b=null),d=u))||d)}),define("text!examples/e6-foreach-and-conditional/simple-form.html",["module"],function(e){e.exports='<template>\n  <p>Same as previous example, but use "if", not "switch"</p>\n  <div class="demo-columns">\n    <form submit.trigger="save()" style="max-width: 400px;">\n      Users\n      <button if.bind="users.length < 5"\n              click.trigger="addUser()">+</button>\n      <table class="form-table">\n        <tr repeat.for="user of users">\n          <td style="width: 35%;">\n            <form-field type="select"\n                        value.bind="user.type"\n                        options.bind="typeOptions"\n                        errors.bind="errors.type"></form-field>\n          </td>\n          <td>\n            <form-field value.bind="user.name"\n                        errors.bind="errors[user.id].name"\n                        placeholder="Name"></form-field>\n          </td>\n          <td colspan.bind="$first ? 2 : 1">\n            <form-field value.bind="user.phone"\n                        errors.bind="errors[user.id].phone"\n                        placeholder="Phone"></form-field>\n          </td>\n          <td if.bind="!$first">\n            <button click.trigger="removeUser(user.id)">X</button>\n          </td>\n        </tr>\n      </table>\n\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e7-i18n/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e7-i18n/simple-form.js","src/examples/e7-i18n/simple-form.html","locales/en/translation.json","locales/fr/translation.json"]}}),define("text!examples/e7-i18n/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e7-i18n/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save","aurelia-i18n"],function(e,t,n,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var i=r(n),s=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var l,d,u,c,m,p,f=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function v(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(l=(0,t.inject)(i.default,a.I18N),d=(0,t.computedFrom)("triedSubmit","i18nLocale","model.name","model.age"),u=(0,t.computedFrom)("errors"),l((m=function(){function r(e,t){var n,o,a,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.triedSubmit=!1,this.isSaving=!1,this.model={name:"",age:null},o="locale",i=n=this,(a=p)&&Object.defineProperty(n,o,{enumerable:a.enumerable,configurable:a.configurable,writable:a.writable,value:a.initializer?a.initializer.call(i):void 0}),this.localeOptions=[{value:"en",label:"English"},{value:"fr",label:"French"}],this.i18n=t,this.i18nLocale=this.i18n.getLocale(),e.addHelper("i18n",t),this.validate=e.generateValidator({name:{validate:"mandatory",message:"${i18n.tr('must_not_be_empty')}"},age:[{validate:"mandatory",message:"${i18n.tr('must_not_be_empty')}"},{validate:"isTrue",value:"$value >= 12",message:function(){return t.tr("must_be_at_least",{min:12})}}]})}return r.prototype.localeChanged=function(e){var t=this;this.i18n.setLocale(e).then(function(){t.i18nLocale=t.i18n.getLocale()})},r.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,s.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},f(r,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}}]),r}(),p=v(m.prototype,"locale",[t.observable],{enumerable:!0,initializer:function(){return"en"}}),v(m.prototype,"errors",[d],Object.getOwnPropertyDescriptor(m.prototype,"errors"),m.prototype),v(m.prototype,"hasError",[u],Object.getOwnPropertyDescriptor(m.prototype,"hasError"),m.prototype),c=m))||c)}),define("text!examples/e7-i18n/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n\n    <form submit.trigger="save()">\n      \x3c!-- switch locale --\x3e\n      <form-field type="select"\n                value.bind="locale"\n                options.bind="localeOptions"></form-field>\n\n      <form-field label.bind="\'name\' & t"\n                  value.bind="model.name"\n                  errors.bind="errors.name"></form-field>\n      <form-field label.bind="\'age\' & t"\n                  type="number"\n                  integer-only.bind="true"\n                  value.bind="model.age"\n                  errors.bind="errors.age"></form-field>\n      <button type="submit" disabled.bind="isSaving || hasError">${\'save\' & t}</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e8-merge-server-side-error/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e8-merge-server-side-error/simple-form.js","src/examples/e8-merge-server-side-error/simple-form.html"]}}),define("text!examples/e8-merge-server-side-error/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e8-merge-server-side-error/simple-form",["exports","aurelia-framework","bcx-validation","lodash"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c,m,p=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function f(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("triedSubmit","model.name","model.age"),d=(0,t.computedFrom)("errors"),u=(0,t.computedFrom)("hasError","backendErrors"),s((f((m=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.backendErrors=null,this.model={name:"To Fail",age:null},this.validate=e.generateValidator({name:"mandatory",age:["mandatory",{validate:"number",min:12}]})}return t.prototype.save=function(){var o,t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,this.backendErrors=null,(o=this.model,new Promise(function(e,t){var n=o.name;setTimeout(function(){"To Fail"===n?t({errors:{name:'"'+n+'" is reserved'}}):e({message:"Saved "+JSON.stringify(o)})},500)})).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.backendErrors=i.default.mapValues(e.errors,function(e){return[e]}),t.isSaving=!1})))},p(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}},{key:"hasErrorOrBackendError",get:function(){return this.hasError||!!this.backendErrors}}]),t}()).prototype,"errors",[l],Object.getOwnPropertyDescriptor(m.prototype,"errors"),m.prototype),f(m.prototype,"hasError",[d],Object.getOwnPropertyDescriptor(m.prototype,"hasError"),m.prototype),f(m.prototype,"hasErrorOrBackendError",[u],Object.getOwnPropertyDescriptor(m.prototype,"hasErrorOrBackendError"),m.prototype),c=m))||c)}),define("text!examples/e8-merge-server-side-error/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n\n    <form submit.trigger="save()">\n      <form-field label="Name"\n                  value.bind="model.name"\n                  errors.bind="errors.name || backendErrors.name"></form-field>\n      <form-field label="Age"\n                  type="number"\n                  integer-only.bind="true"\n                  value.bind="model.age"\n                  errors.bind="errors.age || backendErrors.age"></form-field>\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n\n    <div class="debug-errors">\n      <span>The backendErrors object:</span>\n      <pre>${backendErrors | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("examples/e9-warnings-and-errors/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Index=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sources=["src/examples/e9-warnings-and-errors/simple-form.js","src/examples/e9-warnings-and-errors/simple-form.html"]}}),define("text!examples/e9-warnings-and-errors/index.html",["module"],function(e){e.exports='<template>\n  <require from="./simple-form"></require>\n\n  <div class="bcx-doc-demo">\n    <div class="demo-app">\n      <simple-form></simple-form>\n    </div>\n    <div class="demo-code" as-element="display-sources" sources.bind="sources"></div>\n  </div>\n</template>\n'}),define("examples/e9-warnings-and-errors/simple-form",["exports","aurelia-framework","bcx-validation","../../utils/fake-save"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SimpleForm=void 0;var a=r(n),i=r(o);function r(e){return e&&e.__esModule?e:{default:e}}var s,l,d,u,c,m,p,f=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function v(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}e.SimpleForm=(s=(0,t.inject)(a.default),l=(0,t.computedFrom)("triedSubmit","model.name","model.age"),d=(0,t.computedFrom)("errors"),u=(0,t.computedFrom)("triedSubmit","model.name","model.age"),c=(0,t.computedFrom)("warnings"),s((v((p=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.triedSubmit=!1,this.isSaving=!1,this.model={name:"Bob",age:null},this.validate=e.generateValidator({name:"mandatory",age:"mandatory"}),this.warningValidate=e.generateValidator({name:["notMandatory",{validate:"number",value:"$value.length",min:4,message:'"${$value}" is too short'}],age:["notMandatory",{validate:"number",min:12}]})}return t.prototype.save=function(){var t=this;this.isSaving||(this.triedSubmit=!0,this.hasError||(this.isSaving=!0,(0,i.default)(this.model).then(function(e){t.isSaving=!1,alert(e.message)},function(e){t.isSaving=!1})))},f(t,[{key:"errors",get:function(){if(this.triedSubmit)return this.validate(this.model)}},{key:"hasError",get:function(){return!!this.errors}},{key:"warnings",get:function(){if(this.triedSubmit)return this.warningValidate(this.model)}},{key:"hasWarning",get:function(){return!!this.warnings}}]),t}()).prototype,"errors",[l],Object.getOwnPropertyDescriptor(p.prototype,"errors"),p.prototype),v(p.prototype,"hasError",[d],Object.getOwnPropertyDescriptor(p.prototype,"hasError"),p.prototype),v(p.prototype,"warnings",[u],Object.getOwnPropertyDescriptor(p.prototype,"warnings"),p.prototype),v(p.prototype,"hasWarning",[c],Object.getOwnPropertyDescriptor(p.prototype,"hasWarning"),p.prototype),m=p))||m)}),define("text!examples/e9-warnings-and-errors/simple-form.html",["module"],function(e){e.exports='<template>\n  <div class="demo-columns">\n\n    <form submit.trigger="save()">\n      <form-field label="Name"\n                  value.bind="model.name"\n                  errors.bind="errors.name"\n                  warnings.bind="warnings.name"></form-field>\n      <form-field label="Age"\n                  type="number"\n                  integer-only.bind="true"\n                  value.bind="model.age"\n                  errors.bind="errors.age"\n                  warnings.bind="warnings.age"></form-field>\n      <button type="submit" disabled.bind="isSaving || hasError">Save</button>\n    </form>\n\n    <div class="debug-errors">\n      <span>The errors object:</span>\n      <pre>${errors | json:2}</pre>\n    </div>\n\n    <div class="debug-errors">\n      <span>The warnings object:</span>\n      <pre>${warnings | json:2}</pre>\n    </div>\n  </div>\n</template>\n'}),define("main",["exports","./environment","bcx-validation","aurelia-i18n"],function(e,t,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.configure=function(n){n.use.standardConfiguration().feature("resources").developmentLogging(a.default.debug?"info":"warn").plugin("bcx-doc-base").transient(i.default),a.default.testing&&n.use.plugin("aurelia-testing");n.use.plugin("aurelia-i18n",function(e){var t=["t","i18n"];return o.TCustomAttribute.configureAliases(t),e.i18next.use(o.Backend.with(n.loader)),e.setup({backend:{loadPath:"../locales/{{lng}}/{{ns}}.json"},attributes:t,lng:"en",fallbackLng:"en",debug:!1})}),n.start().then(function(){return n.setRoot()})};var a=r(t),i=r(n);function r(e){return e&&e.__esModule?e:{default:e}}}),define("text!not-found.html",["module"],function(e){e.exports='<template><h2 id="page-not-found-">Page not found :-(</h2>\n</template>'}),define("text!reference/add-helper-for-expression.html",["module"],function(e){e.exports="<template><h1 id=\"add-helper-for-expression\">Add helper for expression</h1>\n<p><code>bcx-validation</code> by default adds lodash as a helper to <code>bcx-expression-evaluator</code>, so you can use lodash in all expressions.</p>\n<p>You can add your own helper.</p>\n<div><code-viewer value=\"validation.addHelper('sum', (a, b) => a + b);\n\nvar rule = {\n  a: {\n    validate: 'isTrue',\n    value: 'sum($value, b) > 10',\n    message: &quot;sum(\\${sum($value,b)}) is not more than 10&quot;\n  }\n};\n\nvalidation.validate({a: 2, b: 3}, rule);\n// => { a: ['sum(5) is not more than 10'] }\" mode=\"js\"></code-viewer></div>\n\n<p>That was a trivial example. Here is a more useful example.</p>\n<div><code-viewer value=\"var model = {\n  customers: [\n    {id: 'c1', name: 'A', friendIds: ['c3', 'c4']},\n    {id: 'c2', name: 'B', friendIds: []},\n    {id: 'c3', name: 'C', friendIds: ['c1']},\n    {id: 'c4', name: 'D', friendIds: ['c1']},\n  ]\n};\n\nvalidation.addHelper('customerOf', (id) => _.find(model.customers, {id}));\" mode=\"js\"></code-viewer></div>\n\n<p>Then you can use <code>customerOf(a_id)</code> in any expression. For instance, on any property of a customer, you can do <code>&quot;_(friendIds).map(customerOf).map(&#39;name&#39;).value()&quot;</code> to get all friends&#39; names for that customer.</p>\n<p>That concludes all <code>bcx-validation</code> features.</p>\n<h1 id=\"summary\">Summary</h1>\n<p>Since atomic rule, chain rule, nested rule, and transformers are treated generically as rule, they can be composed together in all sorts of ways.</p>\n<p>Most time, <code>bcx-validation</code> treats expression and function exchangeable. There are two special cases:</p>\n<blockquote>\n<p>In <code>if</code> transformer, <code>{if: &quot;conditionExpression&quot;}</code> only supports expression as condition. This is to avoid ambiguousness. If you want to validate a nested property named &quot;if&quot;, you can use <code>{if: aFunction}</code> or <code>{if: {validate: &quot;fullShapeRule&quot;}}</code> or <code>{if: [&quot;aliasInChain&quot;, ...]}</code>.</p>\n</blockquote>\n<blockquote>\n<p>In <code>foreach</code> transformer, top level function is a rule factory, not raw validator.</p>\n</blockquote>\n<p><code>bcx-validation</code>&#39;s rule format is simple and readable, it always tries to understand what you want.</p>\n<p>But when validating some property name that&#39;s one of <code>bcx-validation</code>&#39;s reserved keys, it could be ambiguous. Like validating property named &quot;validate&quot; with &quot;mandatory&quot; validator: <code>{validate: &quot;mandatory&quot;}</code> (<code>bcx-validation</code> would not see it as your intended nested validation).</p>\n<blockquote>\n<p>Reserved keys are <code>validate</code>, <code>value</code>, <code>message</code>, <code>stopValidationChainIfFail</code>, <code>stopValidationChainIfPass</code>. Plus <code>if</code>, <code>switch</code>, <code>foreach</code>, <code>key</code>, introduced by standard transformers.</p>\n</blockquote>\n<p>The easy way to avoid ambiguousness is to use either full shape, or wrap it in a chain, <code>{validate: {validate: &quot;mandatory&quot;}}</code> or <code>{validate: [&quot;mandatory&quot;]}</code>. This works for all our reserved keys.</p>\n<blockquote>\n<p>Note <code>foreach</code> and <code>key</code> works in a pair. Either they are recognised as <code>foreach</code> transformer as a whole, or recognised as nested validation on property &quot;foreach&quot; and &quot;key&quot;.</p>\n</blockquote>\n<p>Happy validating!</p>\n</template>"}),define("text!reference/basic-shape-of-a-rule.html",["module"],function(e){e.exports='<template><h1 id="basic-shape-of-a-rule">Basic shape of a rule</h1>\n<p><code>bcx-validation</code> makes zero assumption about your <code>model</code> (the stuff you want to validate), it can be any JavaScript object.</p>\n<p>A <code>model</code> can be simply a String or Number (or even Function or null/undefined). We will start with simplest <code>model</code> to show you the simplest usage of <code>rule</code>.</p>\n<p>Let&#39;s use term <code>validator</code> for an implementation of executing certain <code>rule</code>.</p>\n<p>To use <code>isTrue</code> <code>validator</code>, you write a rule like this:</p>\n<div><code-viewer value="{validate: \'isTrue\'}" mode="js"></code-viewer></div>\n\n<p>Every <code>bcx-validation</code> rule is an object with reserved key <code>validate</code>, the value of the key is a string identifying an known <code>validator</code> to your validation instance.</p>\n<blockquote>\n<p>Note <code>isTrue</code> validator tests truthy of the value, empty string and number zero are false, but empty array/object are true.</p>\n</blockquote>\n<p>When it fails, it returns an array of error message.</p>\n<div><code-viewer value="validation.validate(false, {validate: \'isTrue\'})\n// => [\'must be true\']" mode="js"></code-viewer></div>\n\n<blockquote>\n<p> For consistency, even a single error message is wrapped in an array.</p>\n</blockquote>\n<p>When it passes, it returns undefined.</p>\n<div><code-viewer value="validation.validate(true, {validate: \'isTrue\'})\n// => undefined" mode="js"></code-viewer></div>\n\n<h2 id="optional-value-override-and-message-override">Optional value override and message override</h2>\n<p>Instead of testing the current value, you can override the value before it is being judged.</p>\n<h3 id="override-using-expression">Override using expression</h3>\n<div><code-viewer value="validation.validate(\'lorem\', {validate: \'isTrue\', value: \'$value.length >= 8\'});\n// => [\'must be true\']" mode="js"></code-viewer></div>\n\n<p>The error message is odd, it doesn&#39;t reflect our intension, let&#39;s overwrite it.</p>\n<div><code-viewer value="validation.validate(\'lorem\', {validate: \'isTrue\',\n                              value: \'$value.length >= 8\',\n                              message: \'must be at least 8 characters long\'});\n// => [\'must be at least 8 characters long\']" mode="js"></code-viewer></div>\n\n<p>This looks better.</p>\n<blockquote>\n<p><code>value</code> and <code>message</code> are the other two reserved keys in <code>bcx-validation</code> rule, it provides override point for value and error message.</p>\n</blockquote>\n<blockquote>\n<p>They are the key features to allow us to do <a href="#/reference/validator-composition">validator composition</a>.</p>\n</blockquote>\n<p>Look back on the value override, <code>&quot;$value.length &gt;= 8&quot;</code>, this is processed by <a href="https://github.com/buttonwoodcx/bcx-expression-evaluator">bcx-expression-evaluator</a>, which uses exact same syntax as aurelia-binding provides. For users with some aurelia background, <code>$this</code> and <code>$parent</code> are special context variables you can use inside the expression. <code>bcx-validation</code> introduces more special context variables.</p>\n<p>Here <code>$value</code> is the first speical context variable that <code>bcx-validation</code> makes available to expression. <code>$value</code> represents the value (&quot;lorem&quot;) being validated.</p>\n<blockquote>\n<p>Since we have not use any <a href="#/reference/nested-rule">nested rule</a> here, both <code>$value</code> and <code>$this</code> means &quot;lorem&quot;, you can use <code>&quot;$this.length &gt;= 8&quot;</code> for value override, the result will be same. In nested rule usage, <code>$value</code> means the value of current property, <code>$this</code> means current context (the model has that property). We will explain it later.</p>\n</blockquote>\n<h3 id="override-using-function">Override using function</h3>\n<p>In Buttonwoodcx, we mainly use expression. But for most of users, if you don&#39;t need expression, you can supply function for value override.</p>\n<div><code-viewer value="validation.validate(\'lorem\', {validate: \'isTrue\',\n                              value: value => value.length >= 8,\n                              message: \'must be at least 8 characters long\'});\n// => [\'must be at least 8 characters long\']" mode="js"></code-viewer></div>\n\n<blockquote>\n<p>You might noticed the function we used for value override is not quite safe, when value is null/undefined, the above code raises exception on <code>value.length</code>. The safer way is to do <code>value =&gt; value &amp;&amp; value.length &gt;= 8</code>.</p>\n</blockquote>\n<blockquote>\n<p>While you have to be careful to do not provide functions throws exception, <code>bcx-expression-evaluator</code> is quite safe, silent most of the time, <code>&quot;$value.length &gt;= 8&quot;</code> never throws exception.</p>\n</blockquote>\n<blockquote>\n<p>The full list of arguments of that function is <code>function(value, propertyPath, context, get)</code>. We only used the first <code>value</code> argument here. <code>propertyPath</code> and <code>context</code> are useful in <a href="#/reference/nested-rule">nest rule</a>, <code>get</code> is a function to get arbitrary expression value from current scope. In <code>bcx-validation</code>, no matter what you use function for, (to override value, to define raw validator, to provide a rule factory) they all have that same list of arguments, but there are different requirements on return value.</p>\n</blockquote>\n<p>If you are interested on using expression, please read through <a href="https://github.com/buttonwoodcx/bcx-expression-evaluator">bcx-expression-evaluator README</a>.</p>\n<p><code>bcx-validation</code> uses <a href="https://github.com/lodash/lodash">lodash</a> extensively. For convenience, lodash is available as a helper to any expression used in <code>bcx-validation</code>. So instead of <code>&quot;$value.length &gt;= 8&quot;</code>, you can also write <code>&quot;_.size($value) &gt;= 8&quot;</code>.</p>\n<p>Let&#39;s look back on the message override again, the message you provided is actually evaluated by <code>bcx-expression-evaluator</code> in es6 string interpolation mode. <code>&quot;must be at least 8 characters long&quot;</code> is actually like es6 <code>`must be at least 8 characters long`</code>.</p>\n<p>It means you can do this:</p>\n<div><code-viewer value="validation.validate(\'lorem\', {validate: \'isTrue\',\n                              value: \'$value.length >= 8\',\n                              message: \'&quot;\\${$value}&quot; is less than 8 characters long\'});\n// => [\'&quot;lorem&quot; is less than 8 characters long\']" mode="js"></code-viewer></div>\n\n<p>You have heard <code>bcx-validation</code> treats expression and function almost exchangeable. It means you can do this:</p>\n<div><code-viewer value="validation.validate(\'lorem\', {validate: \'isTrue\',\n                              value: \'$value.length >= 8\',\n                              message: value => `&quot;\\${value}&quot; is less than 8 characters long`});\n// => [\'&quot;lorem&quot; is less than 8 characters long\']" mode="js"></code-viewer></div>\n\n<h3 id="override-using-regex">Override using regex</h3>\n<p>Besides expression and function, you can also use regex in value override.</p>\n<div><code-viewer value="validation.validate(\'abc\', {validate: \'isTrue\',\n                            value: /\\d/,\n                            message: \'must contain some digits\'});\n// => [\'must contain some digits\']" mode="js"></code-viewer></div>\n\n<p>When you use regex, it behaves as value override with function <code>value =&gt; /\\d/.test(value)</code>.</p>\n<blockquote>\n<p>The reason of specifically supporting regex in value override, is that <code>bcx-expression-evaluator</code> doesn&#39;t allow regex literal inside expression.</p>\n</blockquote>\n<blockquote>\n<p>When use regex in value override, the returned value is either true or false. Use <code>isTrue</code> or <code>isFalse</code> validator with regex value override.</p>\n</blockquote>\n<blockquote>\n<p><code>{validate: &quot;isTrue&quot;, value: /regex/, message: &quot;...&quot;}</code> is verbose, <code>bcx-validation</code> allows you to write <code>{validate: /regex/, message: &quot;...&quot;}</code> or simply <code>/regex/</code> (if you don&#39;t even want to override error message). These shortcuts are implemented as <a href="#/reference/transformer-rule">transformer</a>.</p>\n</blockquote>\n<h3 id="use-bare-string-as-alias">Use bare string as alias</h3>\n<p>When you don&#39;t need to override either value or error message. You can use the bare validator name as a short-cut.</p>\n<div><code-viewer value="validation.validate(false, \'isTrue\')\n// => [\'must be true\']" mode="js"></code-viewer></div>\n\n<blockquote>\n<p>In the example showed in <a href="#/reference/intro">introduction</a>, <code>&quot;email&quot;</code>, <code>&quot;mandatory&quot;</code> etc do not have the full shape of a rule. They are aliases, the full form of <code>&quot;email&quot;</code> is still <code>{validate: &quot;email&quot;}</code>.</p>\n</blockquote>\n<p>Let&#39;s move on to <a href="#/reference/raw-function-as-rule">raw function as rule</a>.</p>\n</template>'}),define("text!reference/chain-of-rules.html",["module"],function(e){e.exports="<template><h2 id=\"chain-of-rules\">Chain of rules</h2>\n<p>You can use multiple rules to validate a value. <code>bcx-validation</code> will merge all error messages into one single array.</p>\n<div><code-viewer value=\"validation.validate('lorem', [\n {validate: /[a-z]/, message: 'must contain lower case letter'},\n {validate: /[A-Z]/, message: 'must contain upper case letter'},\n {validate: /\\d/, message: 'must contain digit'},\n]);\n// => ['must contain upper case letter', 'must contain digit']\" mode=\"js\"></code-viewer></div>\n\n<p>When <code>bcx-validation</code> validates the value, you have chance to break the chain (stop it early) using reserved keys <code>stopValidationChainIfFail</code> and <code>stopValidationChainIfPass</code>. Here the 3rd rule is skipped because of failure on the 2nd rule.</p>\n<div><code-viewer value=\"validation.validate('lorem', [\n {validate: /[a-z]/, message: 'must contain lower case letter', stopValidationChainIfFail: true},\n {validate: /[A-Z]/, message: 'must contain upper case letter', stopValidationChainIfFail: true},\n {validate: /\\d/, message: 'must contain digit'},\n]);\n// => ['must contain upper case letter']\" mode=\"js\"></code-viewer></div>\n\n<p><code>bcx-validation</code> also provides three validators to support easy early break of chain. <code>passImmediatelyIf</code>, <code>skipImmediatelyIf</code>, <code>failImmediatelyIf</code>.</p>\n<div><code-viewer value=\"var rule = [\n  {validate: 'passImmediatelyIf', value: &quot;$value == 'NA'&quot;},\n  {validate: 'failImmediatelyIf', value: '_.isEmpty($value)', message: 'must not be empty'},\n  {validate: /[a-z]/, message: 'must contain lower case letter', stopValidationChainIfFail: true},\n  {validate: /[A-Z]/, message: 'must contain upper case letter', stopValidationChainIfFail: true},\n  {validate: /\\d/, message: 'must contain digit'},\n];\n\nvalidation.validate('NA', rule);\n// => undefined\n\nvalidation.validate('', rule);\n// => ['must not be empty']\" mode=\"js\"></code-viewer></div>\n\n<p>Here the first validation checks if value is <code>&quot;NA&quot;</code>, stop the validation chain immediately and return as passed. The second validation checks if value is empty, stop the validation chain immediately and fail with message &quot;must not be empty&quot;.</p>\n<blockquote>\n<p>We kept rest of the rule unchanged, but you can rewrite the third rule as <code>{validate: &quot;failImmediatelyIf&quot;, value =&gt; !/[a-z]/.test(v), message: &quot;must contain lower case letter&quot;}</code>.</p>\n</blockquote>\n<blockquote>\n<p>You can use <code>skipImmediatelyIf</code> in first validation. It behaves same as <code>passImmediatelyIf</code> in this use case. The difference between <code>skip</code> and <code>pass</code> is that <code>bcx-validation</code> actually has 3 states for result: <code>pass</code>, <code>fail</code> and <code>skip</code> (considered neither pass nor fail). The final result generated by <code>validation.validate(...)</code> only contains error literals, the tri-state was not exposed to end user. State <code>skip</code> was designed to properly implement conditional validation (the <code>if</code> transformer).</p>\n</blockquote>\n<p>Since chain of rules is considered a rule, you can use sub-chain inside a chain. Beware early break of sub-chain doesn&#39;t affect the outer chain. Here the last rule was still checked after early break in previous sub-chain.</p>\n<div><code-viewer value=\"var rule = [\n  {validate: 'passImmediatelyIf', value: &quot;$value == 'NA'&quot;},\n  {validate: 'failImmediatelyIf', value: '_.isEmpty($value)', message: 'must not be empty'},\n  [\n    {validate: /[a-z]/, message: 'must contain lower case letter', stopValidationChainIfFail: true},\n    {validate: /[A-Z]/, message: 'must contain upper case letter', stopValidationChainIfFail: true},\n    {validate: /\\d/, message: 'must contain digit'}\n  ],\n  {validate: /_/, message: 'must contain underscore'}\n];\n\nvalidation.validate('a', rule);\n// => [ 'must contain upper case letter', 'must contain underscore' ]\" mode=\"js\"></code-viewer></div>\n\n<p>With the introduction of chain control, it looks getting complicated. But fortunately, you will rarely use any of <code>passImmediatelyIf</code>, <code>skipImmediatelyIf</code>, <code>failImmediatelyIf</code>, <code>stopValidationChainIfFail</code> or <code>stopValidationChainIfPass</code>. They are meant to be used in defining new validator with composition.</p>\n<p>Let&#39;s move on to <a href=\"#/reference/if-transformer\">conditional validation</a>.</p>\n</template>"}),define("text!reference/foreach-transformer.html",["module"],function(e){e.exports="<template><h1 id=\"foreach-transformer\">foreach transformer</h1>\n<p><code>foreach</code> is a feature that sets <code>bcx-validation</code> apart from other alternatives. It made easy to validate dynamic models.</p>\n<p>The <a href=\"#/reference/intro\">introduction</a> showed an example of <code>foreach</code> transformer. It uses item index as the error key, that&#39;s default behaviour of <code>foreach</code> transformer.</p>\n<h2 id=\"error-key-override\">Error key override</h2>\n<p>Let&#39;s use customer id as the error key, this makes it easier to inspect error object.</p>\n<div><code-viewer value=\"var rule = {\n  customers: {\n    foreach: {\n      name: ['mandatory', 'unique'],\n      age: ['notMandatory', {validate: 'number', min: 16}],\n      id: ['mandatory', 'unique']\n    },\n    key: 'id'\n  }\n};\n\nvar model = {\n  customers: [\n    {id: 'aa', name: 'Arm'},\n    {id: 'ab', name: 'Bob'},\n    {id: 'ab', name: 'Bob', age: 15},\n    {id: 'ad', name: '', age: 18}\n  ]\n};\n\nvalidation.validate(model, rule);\n/* =>\n{\n  customers: {\n    ab: {\n      name: ['must be unique'],\n      age: ['must be at least 16'],\n      id: ['must be unique']\n    },\n    ad: {\n      name: ['must not be empty']\n    }\n  }\n}\n*/\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p>Note since the id &quot;ab&quot; is not unique, the error only appears once. If you don&#39;t use <code>key: &quot;id&quot;</code> error key override, the error will appears twice, one on &quot;1&quot;, another on &quot;2&quot;.</p>\n</blockquote>\n<blockquote>\n<p>key can use either expression or function.</p>\n</blockquote>\n<h2 id=\"special-context-variables-introduced-by-foreach\">Special context variables introduced by foreach</h2>\n<p>Underneath, for every item in the model array, <code>foreach</code> transformer creates new overrideContext (aurelia-binding concept) and add few special context variables.</p>\n<blockquote>\n<p>Similar to what aurelia repeater does in html template.</p>\n</blockquote>\n<p>For example, when <code>foreach</code> is validating property &quot;name&quot; of the first item <code>{id: &#39;aa&#39;, name: &#39;Arm&#39;}</code>, it has following context variables.</p>\n<div><code-viewer value=\"{\n  $value: 'Arm'\n  $propertyPath: ['name']\n  $this: {id: 'aa', name: 'Arm'}\n  $parent: {customers: [ /* all 4 */ ]}\n\n  // introduced by foreach\n  $neighbours: [{id: 'ab', name: 'Bob'}, {id: 'ab', name: 'Bob', age: 15}, {id: 'ad', name: '', age: 18}]\n  $neighbourValues: ['Bob', 'Bob', '']\n  $index: 0\n  $first: true\n  $last: false\n}\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p><code>$propertyPath</code> is an array of property names, it can have multiple items (like <code>[&#39;address&#39;, &#39;line1&#39;]</code>) if it&#39;s a deep nested validation. Internally, we use it as lodash property path. You may wonder why we pick the complex array form <code>[&#39;address&#39;, &#39;line1&#39;]</code>, not the simple dot notation form <code>&#39;address.line1&#39;</code>. Lodash supports both forms, but for some property name like &quot;x.y&quot;, dot notation doesn&#39;t work (<code>a.x.y</code> does not mean <code>a[&quot;x.y&quot;]</code>).</p>\n</blockquote>\n<blockquote>\n<p><code>$this</code> is the new context created by foreach, which is the current item.</p>\n</blockquote>\n<blockquote>\n<p><code>$parent</code> is the outer/parent context.</p>\n</blockquote>\n<blockquote>\n<p><code>$neighbours</code> are all the siblings, BUT DO NOT INCLUDE $this itself.</p>\n</blockquote>\n<blockquote>\n<p><code>$neighbourValues</code> are the relevant property values on $neighbours, they are same as <code>_.map($neighbours, _.property($propertyPath))</code> when $propertyPath is not empty. When $propertyPath is empty (explained later in &quot;Use foreach to validate simple array&quot;), $neighbourValues are same as $neighbours.</p>\n</blockquote>\n<blockquote>\n<p><code>$index</code>, <code>$first</code>, <code>$last</code> are for the position of current item. They are similar to what aurelia repeater provides.</p>\n</blockquote>\n<blockquote>\n<p>For people with aurelia experience, note we don&#39;t have $even, $odd context variables in foreach. We don&#39;t provide them to avoid conflict with our standard &quot;number&quot; validator which supports $even/$odd options.</p>\n</blockquote>\n<p>Let&#39;s have a look how we defined standard &quot;unique&quot; validator.</p>\n<div><code-viewer value=\"// copied from standard-validators.js\n// unique. need to access neighbours\n// option items is evaluated from current scope\nvalidation.addValidator('unique', {validate: 'notIn', 'items.bind': '$neighbourValues', message: 'must be unique'});\" mode=\"js\"></code-viewer></div>\n\n<p>&quot;unique&quot; validator reuses &quot;notIn&quot; validator, and use $neighbourValues in &quot;notIn&quot;&#39;s &quot;items&quot; option.</p>\n<blockquote>\n<p>This is a good example of using &quot;option.bind&quot;. In validator composition, use &quot;bind&quot; to pass runtime information to underneath validators.</p>\n</blockquote>\n<p>Let&#39;s do another exercise around foreach context variables. Let&#39;s validate, that in a group of people, there are only certain maximum number of leaders.</p>\n<div><code-viewer value=\"validation.addValidator('maxLeader', {\n  if: '$this.leader',\n  validate: 'number',\n  value: '_($neighbours).filter({leader: true}).size()',\n  'max.bind': '$max - 1',\n  message: 'Only maximum \\${$max} leaders allowed'\n});\" mode=\"js\"></code-viewer></div>\n\n<p>We reuse &quot;number&quot; validator, when current person is a leader, checks the count of all neighbour leaders, the number can not exceed (max - 1).</p>\n<blockquote>\n<p>Note that we didn&#39;t check $max option, it assumes the option is mandatory. For safety, you can use <code>if: &quot;$this.leader &amp;&amp; $max &gt; 0&quot;</code>.</p>\n</blockquote>\n<blockquote>\n<p>Note we didn&#39;t use $value or $propertyPath in any of the expressions. This means our &quot;maxLeader&quot; validator can be applied to any property of a person. We will elaborate this in examples.</p>\n</blockquote>\n<blockquote>\n<p>We passed ($max - 1) to underneath &quot;number&quot; validator&#39;s &quot;max&quot; option. This is not the only way to write &quot;maxLeader&quot;, you can also do <code>{validate: &quot;isTrue&quot;, value: &quot;_($neighbours).filter({leader: true}).size() &lt;= ($max - 1)&quot;}</code>.</p>\n</blockquote>\n<p>Let&#39;s try out our &quot;maxLeader&quot; validator.</p>\n<div><code-viewer value=\"var validate2Leaders = validation.generateValidator({\n  foreach: {\n    name: ['mandatory', 'unique'],\n    leader: {validate: 'maxLeader', max: 2}\n  }\n});\n\nvalidate2Leaders([\n  {name: 'A', leader: true},\n  {name: 'B', leader: true},\n  {name: 'C', leader: true},\n  {name: 'D'},\n]);\n/* =>\n{ '0': { leader: [ 'Only maximum 2 leaders allowed' ] },\n  '1': { leader: [ 'Only maximum 2 leaders allowed' ] },\n  '2': { leader: [ 'Only maximum 2 leaders allowed' ] } }\n*/\n\nvalidate2Leaders([\n  {name: 'A', leader: true},\n  {name: 'B', leader: true},\n  {name: 'C'},\n  {name: 'D'},\n]);\n// => undefined\" mode=\"js\"></code-viewer></div>\n\n<p>Because the way we design &quot;maxLeader&quot;, we can use it on other property instead of &quot;leader&quot; property.</p>\n<div><code-viewer value=\"var validate2LeadersOnNameProperty = validation.generateValidator({\n  foreach: {\n    name: ['mandatory', 'unique', {validate: 'maxLeader', max: 2}],\n  }\n});\n\nvalidate2LeadersOnNameProperty([\n  {name: 'A', leader: true},\n  {name: 'B', leader: true},\n  {name: 'C', leader: true},\n  {name: 'D'},\n]);\n/* =>\n{ '0': { name: [ 'Only maximum 2 leaders allowed' ] },\n  '1': { name: [ 'Only maximum 2 leaders allowed' ] },\n  '2': { name: [ 'Only maximum 2 leaders allowed' ] } }\n*/\" mode=\"js\"></code-viewer></div>\n\n<p>Let&#39;s show you another version of &quot;maxLeader&quot;. This time, assume it&#39;s validating &quot;leader&quot; property.</p>\n<div><code-viewer value=\"validation.addValidator('maxLeader', {\n  if: '$value', // current item.leader value\n  validate: 'number',\n  value: '_($neighbourValues).compact().size()', // _.compact removes false leader\n  'max.bind': '$max - 1',\n  message: 'Cannot exceed maximum \\${$max} leaders'\n});\n\nvalidate2Leaders([\n  {name: 'A', leader: true},\n  {name: 'B', leader: true},\n  {name: 'C', leader: true},\n  {name: 'D'},\n]);\n/* => validating on 'leader' still works\n{ '0': { leader: [ 'Cannot exceed maximum 2 leaders' ] },\n  '1': { leader: [ 'Cannot exceed maximum 2 leaders' ] },\n  '2': { leader: [ 'Cannot exceed maximum 2 leaders' ] } }\n*/\n\nvalidate2LeadersOnNameProperty([\n  {name: 'A', leader: true},\n  {name: 'B', leader: true},\n  {name: 'C', leader: true},\n  {name: 'D'},\n]);\n/* => validating on 'name', oops, all names are truthy\n{ '0': { name: [ 'Cannot exceed maximum 2 leaders' ] },\n  '1': { name: [ 'Cannot exceed maximum 2 leaders' ] },\n  '2': { name: [ 'Cannot exceed maximum 2 leaders' ] },\n  '3': { name: [ 'Cannot exceed maximum 2 leaders' ] } }\n*/\" mode=\"js\"></code-viewer></div>\n\n<p>An example to show <code>foreach</code> and <code>switch</code> work nicely together.</p>\n<div><code-viewer value=\"var rule = {\n  users: {\n    foreach: {\n      switch: 'type',\n      cases: {\n        customer: {\n          email: ['notMandatory', 'email'],\n          phone: ['notMandatory', 'unique'],\n          name: ['mandatory', 'unique']\n        },\n        dealer: {\n          dealerId: ['mandatory', 'unique'],\n          phone: ['mandatory', 'unique'],\n          email: ['mandatory', 'email'],\n          name: ['mandatory', 'unique']\n        }\n      }\n    },\n    key: 'id'\n  }\n};\n\nvar model = {\n  users: [\n    {id: 'c01', type: 'customer', name: 'Arm', email: 'arm@test.com'},\n    {id: 'c02', type: 'customer', name: 'Bob', email: 'bob@test.com'},\n    {id: 'c03', type: 'customer', name: 'Bob', email: 'bob'},\n    {id: 'd01', type: 'dealer', name: 'Dealer A', email: 'arm@test.com'},\n    {id: 'd02', dealerId: 'dealer.b', type: 'dealer', name: 'Dealer B', email: 'on', phone: '02123'},\n    {id: 'd03', dealerId: 'dealer.b', type: 'dealer', name: 'Dealer B', email: 'b@test.com', phone: '02123'},\n  ]\n};\n\nvalidation.validate(model, rule);\n/* =>\n{ 'users': {\n  'c02': { 'name': ['must be unique'] },\n  'c03': { 'email': ['not a valid email'],\n           'name': ['must be unique'] },\n  'd01': { 'dealerId': ['must not be empty'],\n           'phone': ['must not be empty'] },\n  'd02': { 'dealerId': ['must be unique'],\n           'phone': ['must be unique'],\n           'email': ['not a valid email'],\n           'name': ['must be unique'] },\n  'd03': { 'dealerId': ['must be unique'],\n           'phone': ['must be unique'],\n           'name': ['must be unique'] } } }\n*/\" mode=\"js\"></code-viewer></div>\n\n<p>Chain rule works under <code>foreach</code> too. Following rule works same as previous one.</p>\n<div><code-viewer value=\"var rule = {\n  users: {\n    foreach: [\n      // generic rule on every customer/dealer\n      {\n        name: ['mandatory', 'unique'],\n        email: ['notMandatory', 'email'],\n        phone: ['notMandatory', 'unique']\n      },\n      // strict rule on dealer\n      {\n        switch: 'type',\n        cases: {\n          dealer: {\n            dealerId: ['mandatory', 'unique'],\n            phone: ['mandatory', 'unique'],\n            email: ['mandatory', 'email'],\n          }\n        }\n      }\n    ],\n    key: 'id'\n  }\n};\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p>Note we use rule for &quot;customer&quot; as the first one in chain. Second one only validating &quot;dealer&quot;. Since all rules in &quot;dealer&quot; are stricter, the final result generated by <code>bcx-validation</code> will be nicely merged.</p>\n</blockquote>\n<blockquote>\n<p>The order of the rules doesn&#39;t matter here. If you swap the position of generic rule and strict rule, the final result is still same.</p>\n</blockquote>\n<h2 id=\"use-foreach-to-validate-simple-array\">Use foreach to validate simple array</h2>\n<p>You can use <code>foreach</code> to validate simple array (not array of complex object).</p>\n<div><code-viewer value=\"validation.validate(['xx', 'ab@test.com', '-xi@ a'], {foreach: 'email'});\n// => { '0': [ 'not a valid email' ], '2': [ 'not a valid email' ] }\" mode=\"js\"></code-viewer></div>\n#### Use foreach to validate object\n\n<code>foreach</code> is designed to validate array, but you still can use it to validate a normal object. Obviously $index, $first, $last do not make sense in this use case.\n\n<div><code-viewer value=\"validation.validate({meta: {field1: '  ', field2: 'hello'}},\n                    {meta: {foreach: 'mandatory'}});\n// => { meta: { field1: [ 'must not be empty' ] } }\" mode=\"js\"></code-viewer></div>\n\n<h2 id=\"foreach-with-rule-factory-function\"><code>foreach</code> with rule factory function</h2>\n<p>The last feature of <code>foreach</code> is that it treats raw function specially.</p>\n<p>We learnt before that a raw function is treated as raw validator implementation. But if it&#39;s used under <code>foreach</code>, it is treated as rule factory.</p>\n<blockquote>\n<p>This only applies to top level raw function, either in <code>{foreach: aRuleFactoryFunc}</code> or <code>{foreach: [normalRule, aRuleFactoryFunc, anotherRuleFactoryFunc,...]}</code>.</p>\n</blockquote>\n<blockquote>\n<p>This is designed to provide flexibility in <code>foreach</code> when <code>switch</code> and <code>if</code> is not enough for conditional validation.</p>\n</blockquote>\n<blockquote>\n<p>There is trade-off for this flexibility. Because rule factory requires runtime information to build the rule, it cannot be pre-compiled. This means you would not see much performance benefit with <code>generateValidator</code>.</p>\n</blockquote>\n<p>The above <code>foreach</code> + <code>switch</code> example can be rewritten as:</p>\n<div><code-viewer value=\"var rule = {\n  users: {\n    foreach: (user) => {\n      switch(user.type) {\n        case 'customer':\n          return {\n            email: ['notMandatory', 'email'],\n            phone: ['notMandatory', 'unique'],\n            name: ['mandatory', 'unique']\n          };\n        case 'dealer':\n          return {\n            dealerId: ['mandatory', 'unique'],\n            phone: ['mandatory', 'unique'],\n            email: ['mandatory', 'email'],\n            name: ['mandatory', 'unique']\n          };\n      }\n    },\n    key: 'id'\n  }\n};\" mode=\"js\"></code-viewer></div>\n\n<p>Let&#39;s move on to <a href=\"#/reference/add-helper-for-expression\">add helper</a>.</p>\n</template>"}),define("text!reference/if-transformer.html",["module"],function(e){e.exports="<template><h1 id=\"conditional-validation-if-transformer-\">Conditional validation (if transformer)</h1>\n<p>Before we get into composition, let&#39;s have a look of conditional validation.</p>\n<div><code-viewer value=\"validation.validate('NA', {if: &quot;$value != 'NA'&quot;, validate: /id\\d+/, message: 'invalid id format'});\n// => undefined\nvalidation.validate('xx', {if: &quot;$value != 'NA'&quot;, validate: /id\\d+/, message: 'invalid id format'});\n// => [ 'invalid id format' ]\nvalidation.validate('id23', {if: &quot;$value != 'NA'&quot;, validate: /id\\d+/, message: 'invalid id format'});\n// => undefined\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p>We only support expression in <code>if</code> condition check, not function. This is to support an edge case that user really want to validate a property named &quot;if&quot; in the model. We will show example of this edge case in <a href=\"#/reference/nested-rule\">nested rule</a>.</p>\n</blockquote>\n<p>Conditional validation was implemented as <code>if</code> transformer. We will explain more in <a href=\"#/reference/transformer-rule\">transformer rule</a>.</p>\n<p>When <code>bcx-validation</code> sees that conditional rule above, it transforms it into:</p>\n<div><code-viewer value=\"validation.validate('NA', [\n  {validate: 'skipImmediatelyIf', value: &quot;!($value != 'NA')&quot;},\n  {validate: /id\\d+/, message: 'invalid id format'}\n]);\" mode=\"js\"></code-viewer></div>\n\n<p>You can see we will rarely use <code>skipImmediatelyIf</code> directly, <code>if</code> transformer does the job, and makes the whole rule short and neat.</p>\n<p><code>if</code> transformer can wrap chain of rules too. Here is a rewrite of the previous chain rule.</p>\n<div><code-viewer value=\"var rule = {\n  if: &quot;$value != 'NA'&quot;,\n  group: [\n    // 'mandatory' validator is almost same as {validate: 'failImmediatelyIf', value: '_.isEmpty($value)', message: 'must not be empty'},\n    'mandatory',\n    [\n      {validate: /[a-z]/, message: 'must contain lower case letter', stopValidationChainIfFail: true},\n      {validate: /[A-Z]/, message: 'must contain upper case letter', stopValidationChainIfFail: true},\n      {validate: /\\d/, message: 'must contain digit'}\n    ],\n    {validate: /_/, message: 'must contain underscore'}\n  ]\n};\" mode=\"js\"></code-viewer></div>\n\n<p>Let&#39;s move on to <a href=\"#/reference/validator-composition\">validator composition</a>.</p>\n</template>"}),define("text!reference/nested-rule.html",["module"],function(e){e.exports="<template><h2 id=\"nested-rule\">Nested rule</h2>\n<div><code-viewer value=\"var rule = {\n  name: ['mandatory', {validate: /^[A-Z]/, message: 'must start with capital letter'}],\n  age: ['notMandatory', {validate: 'number', min: 16}]\n};\n\nvalidation.validate({name: '', age: 18}, rule);\n// => { name: [ 'must not be empty' ] }\n\nvalidation.validate({name: 'bob'}, rule);\n// => { name: [ 'must start with capital letter' ] }\n\nvalidation.validate({name: 'Bob', age: 12}, rule);\n// => { age: [ 'must be at least 16' ] }\n\nvalidation.validate({name: 'bob', age: 12}, rule);\n// => { name: [ 'must start with capital letter' ], age: [ 'must be at least 16' ] }\" mode=\"js\"></code-viewer></div>\n\n<p>As expected, the result is nested too.</p>\n<p>Since a nested rule is considered a rule, you can put it in a chain.</p>\n<div><code-viewer value=\"validation.validate({name: 'bob', age: 12}, [rule]);\n// => { name: [ 'must start with capital letter' ], age: [ 'must be at least 16' ] }\" mode=\"js\"></code-viewer></div>\n\n<h3 id=\"chain-multiple-nested-rule-together-bcx-validation-takes-care-of-merging-result\">Chain multiple nested rule together, <code>bcx-validation</code> takes care of merging result</h3>\n<div><code-viewer value=\"validation.validate({name: '', age: 12}, [\n  {\n    name: ['mandatory'] // {name: 'mandatory'} without array wrapper works too\n  },\n  {\n    name: ['mandatory', {validate: /^[A-Z]/, message: 'must start with capital letter'}],\n    age: ['notMandatory', {validate: 'number', min: 16}]\n  }\n]);\n// => { name: [ 'must not be empty' ], age: [ 'must be at least 16' ] }\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p>Note <code>bcx-validation</code> avoided the duplication of error message &quot;must not be empty&quot; on property &quot;name&quot;.</p>\n</blockquote>\n<blockquote>\n<p>The chain of nested rule looks odd. But imaging in your app, you have validation rules contributed by two or more sub-systems, instead of merging validation rule together, you can just stack them as a chain, <code>bcx-validation</code> will make sure the result is perfectly merged without any duplication.</p>\n</blockquote>\n<p>Let&#39;s move on to <a href=\"#/reference/transformer-rule\">transformer rule</a>.</p>\n</template>"}),define("text!reference/overview.html",["module"],function(e){e.exports="<template><h1 id=\"overview\">Overview</h1>\n<p>This reference doesn&#39;t talk about Aurelia at all. It&#39;s a mathematical walk-through of the design.</p>\n<p>Depending on whether my writing matching your styles of think, it may help you to better understand the design.</p>\n<hr>\n<h1 id=\"bcx-validation\">bcx-validation</h1>\n<p>Another validation library to meet our own need.</p>\n<p>Why not just use some existing validation tool?</p>\n<ol>\n<li><p>most validation tool thinks model is just key-val pairs. We want to validate complex object (a blueprint for cloud deployment). For instance, if cloud provider is AZURE, validates that all vms connected to a load balancer must be within same availablity set, no validation tool on the market is flexible enough to do this.</p>\n</li>\n<li><p>we need to be able to describe validation rule in JSON, as all our business logic is delivered from backend to front-end. (function can still be used in many parts of the rule. Although Buttonwoodcx mainly uses <code>bcx-validation</code>&#39;s expression support, <code>bcx-validation</code> itself treats function and expression almost exchangeable.)</p>\n</li>\n<li><p>we just want a light validation tool, a function that takes <code>model</code> and <code>rule</code> as input, produces a structured <code>error</code> object as output. We don&#39;t need a validation tool that bundled with view/controller layer. Binding model to view layer is not even hard in <a href=\"http://aurelia.io\">Aurelia</a>, we don&#39;t need the help.</p>\n</li>\n</ol>\n<h2 id=\"a-quick-example\">A quick example</h2>\n<p>The entry is designed as a class instead of a function, in order to allow user to customise the tool before validating.</p>\n<div><code-viewer value=\"import Validation from 'bcx-validation';\nconst validation = new Validation();\" mode=\"js\"></code-viewer></div>\n\n<p>The rule.</p>\n<div><code-viewer value=\"const rule = {\n  name: 'mandatory',\n  customers: {\n    foreach: {\n      email: 'email',\n      name: ['mandatory', 'unique'],\n      age: ['notMandatory', {validate: 'number',\n                             'min.bind': 'ageLimit',\n                             message: '\\${$parent.name} must be at least \\${ageLimit} years old'}]\n    }\n  }\n}\" mode=\"js\"></code-viewer></div>\n\n<p>Notice we use <a href=\"https://github.com/buttonwoodcx/bcx-expression-evaluator\">bcx-expression-evaluator</a> in <code>number</code> validator&#39;s <code>min</code> option and error <code>message</code> override.</p>\n<p>The model object.</p>\n<div><code-viewer value=\"const model = {\n  name: 'driver group',\n  ageLimit: 21,\n  customers: [\n    {name: 'Arm', email: 'arm@test.com'},\n    {name: 'Bob', email: 'bob@test.com'},\n    {name: 'Bob', email: 'bob', age: 15},\n    {name: '', age: 18}\n  ]\n}\" mode=\"js\"></code-viewer></div>\n\n<p>Validate it.</p>\n<div><code-viewer value=\"validation.validate(model, rule);\" mode=\"js\"></code-viewer></div>\n\n<p>Or generate a function that can be used repeatedly. Following two line do the same thing.</p>\n<div><code-viewer value=\"const validate = validation.generateValidator(rule);\nvalidate(model);\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p><code>generateValidator</code> has performance benefit. It pre-compiles the rule for later repeated usage.</p>\n</blockquote>\n<p>Returned <code>errors</code> object.</p>\n<div><code-viewer value=\"{\n  customers: {\n    '1': {name: ['must be unique']},\n    '2': {\n      name: ['must be unique'],\n      email:['not a valid email'],\n      age: ['driver group must be at least 21 years old']\n    },\n    '3': {\n      name: ['must not be empty'],\n      email:['not a valid email'],\n      age: ['driver group must be at least 21 years old']\n    }\n  }\n}\" mode=\"js\"></code-viewer></div>\n\n<p>Note <code>customers</code> in the <code>errors</code> object is not an array, it looks like a sparse array but has no <code>length</code> property. Here the <code>key</code> of every error is the original index of the item, you can use other thing (like customer id) for the <code>key</code> in <a href=\"#/reference/foreach-transformer\"><code>foreach</code></a> validator.</p>\n<p>In next few chapters, we will show you how to compose a <code>rule</code>, from the most basic atomic rule to very complex rule. We will revisit this quick example, to see what happened here.</p>\n<p>Let&#39;s move on to <a href=\"#/reference/basic-shape-of-a-rule\">basic shape of a rule</a>.</p>\n</template>"}),define("text!reference/raw-function-as-rule.html",["module"],function(e){e.exports="<template><h2 id=\"raw-function-as-rule\">Raw function as rule</h2>\n<p>Instead of using standard validators provided by <code>bcx-validation</code>, you can supply a raw function as validator.</p>\n<div><code-viewer value=\"const validateLength = value => {\n  if (!(value && value.length >= 8)) {\n    return 'must be at least 8 characters long';\n  }\n};\" mode=\"js\"></code-viewer></div>\n\n<p>If value passed your validator, it should return nothing (null/undefined). Otherwise, return a string or array of strings as error message.</p>\n<div><code-viewer value=\"validation.validate('abc', validateLength);\n// => ['must be at least 8 characters long']\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p>This is not the only way a raw validator can return. It could return a shaped result like <code>{isValid: false, message: &quot;some error&quot;, break: true}</code> for fine control of chain of validators. We will talk about it more in <a href=\"#/reference/chain-of-rules\">chain of rules</a>.</p>\n</blockquote>\n<blockquote>\n<p>A raw validator can also return a boolean. True means pass, false means fail with default error message &quot;invalid&quot;. <code>validation.validate(&quot;abc&quot;, v =&gt; v &amp;&amp; v.length &gt;= 8);</code> =&gt; <code>[&quot;invalid&quot;]</code>.</p>\n</blockquote>\n<h3 id=\"define-new-validator-with-function\">Define new validator with function</h3>\n<p>Raw function validator is rarely used. It doesn&#39;t take any of <code>bcx-validation</code>&#39;s advantages. For re-usability, it&#39;s better to add a new validator.</p>\n<div><code-viewer value=\"validation.addValidator('atLeast8Chars', value => {\n  if (!(value && value.length >= 8)) {\n    return 'must be at least 8 characters long';\n  }\n});\n\nvalidation.validate('abc', {validate: 'atLeast8Chars'});\n// or\nvalidation.validate('abc', 'atLeast8Chars');\n// => ['must be at least 8 characters long']\" mode=\"js\"></code-viewer></div>\n\n<p>Now you can use value and error message override.</p>\n<div><code-viewer value=\"validation.validate('name#id_123#mark', {validate: 'atLeast8Chars',\n                                         value: &quot;_.split($value, '#')[1]&quot;,\n                                         message: 'id must be at least 8 characters long'});\n// => ['id must be at least 8 characters long']\" mode=\"js\"></code-viewer></div>\n\n<p>You can wrap error message over existing error message.</p>\n<div><code-viewer value=\"validation.validate('name#id_123#mark', {validate: 'atLeast8Chars',\n                                         value: &quot;_.split($value, '#')[1]&quot;,\n                                         message: 'id \\${_.join($errors, ', ')}'});\n// => ['id must be at least 8 characters long']\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p><code>$errors</code> is a special context variable only within error message override, it represents the original error messages array.</p>\n</blockquote>\n<blockquote>\n<p>You might noticed the new validator we defined is quite bad for reuse. It could be better if the min length was passed in as option <code>{validate: &quot;atLeast&quot;, length: 8}</code>. We will revisit this and show you how to support option in validator function after <a href=\"#/reference/validator-composition\">validator composition</a>.</p>\n</blockquote>\n<p>Let&#39;s move on to <a href=\"#/reference/chain-of-rules\">chain of rules</a>.</p>\n</template>"}),define("text!reference/standard-transformers.html",["module"],function(e){e.exports='<template><h1 id="standard-transformers">Standard transformers</h1>\n<h3 id="if-transformer-aka-conditional-validation"><a href="#/reference/if-transformer">if transformer</a>, aka conditional validation</h3>\n<h3 id="switch-transformer"><a href="#/reference/switch-transformer">switch transformer</a></h3>\n<h3 id="foreach-transformer"><a href="#/reference/foreach-transformer">foreach transformer</a></h3>\n<h3 id="regex-transformer-2-forms-">regex transformer (2 forms)</h3>\n<ol>\n<li>transform <code>/aRegex/</code> into <code>{validate: &#39;isTrue&#39;, value: /aRegex/, message: &#39;invalid format&#39;}</code></li>\n<li>transform <code>{validate: /aRegex/}</code> into <code>{validate: &#39;isTrue&#39;, value: /aRegex/, message: &#39;invalid format&#39;}</code></li>\n</ol>\n<p>Note the main advantage of form #2 is that it allows you override error message (but you cannot do value override) <code>{validate: /aRegex/, message: &#39;not acceptable!&#39;}</code>.</p>\n<blockquote>\n<p>Technically, the transformer doesn&#39;t know about message override. Message override is later processed in <a href="https://github.com/buttonwoodcx/bcx-validation/blob/master/src/standard-validator-wrap.js"><code>bcx-validation/src/standard-validator-wrap.js</code></a>.</p>\n</blockquote>\n</template>'}),define("text!reference/standard-validators.html",["module"],function(e){e.exports="<template><h1 id=\"standard-validators\">Standard validators</h1>\n<p>Readable source code. It&#39;s part of <a href=\"https://github.com/buttonwoodcx/bcx-validation/blob/master/src/standard-validators.js\"><code>bcx-validation/src/standard-validators.js</code></a></p>\n<div><code-viewer value=\"function isBlank(v) {\n  if (_.isNull(v) || _.isUndefined(v) || _.isNaN(v)) return true;\n  if (_.isString(v)) {\n    if (_.trim(v).length === 0) return true;\n  } else if (_.isArray(v) || _.isPlainObject(v)) {\n    if (_.isEmpty(v)) return true;\n  }\n}\n\n// Validators\n\n// validators implemented in functions.\n\nvalidation.addValidator(&quot;isTrue&quot;, v => v ? null : &quot;must be true&quot;);\nvalidation.addValidator(&quot;isFalse&quot;, v => v ? &quot;must be false&quot; : null);\n\nvalidation.addValidator(\n  &quot;passImmediatelyIf&quot;,\n  v => v ?\n  // stop the chain if passed\n  {isValid: true, break: true} :\n  // continue, never fail\n  null\n);\n\nvalidation.addValidator(\n  &quot;skipImmediatelyIf&quot;,\n  v => v ?\n  // skip rest if passed\n  // isValid is not true, but null\n  {isValid: null, break: true} :\n  // continue, never fail\n  null\n);\n\nvalidation.addValidator(\n  &quot;failImmediatelyIf&quot;,\n  v => v ?\n  // stop the chain if failed\n  {isValid: false, break: true} :\n  // continue\n  null\n);\n\n// all other validators are in form of composition.\n\nvalidation.addValidator(&quot;isBlank&quot;, {validate: &quot;isTrue&quot;, value: isBlank, message: &quot;must be blank&quot;});\nvalidation.addValidator(&quot;notBlank&quot;, {validate: &quot;isFalse&quot;, value: isBlank, message: &quot;must not be blank&quot;});\n\nvalidation.addValidator(&quot;mandatory&quot;, {validate: &quot;failImmediatelyIf&quot;, value: isBlank, message: &quot;must not be empty&quot;});\nvalidation.addValidator(&quot;notMandatory&quot;, {validate: &quot;skipImmediatelyIf&quot;, value: isBlank});\n\n// {validate: 'number', integer: true, min: 0, max: 10, greaterThan: 0, lessThan: 10, even: true, /* odd: true */}\nvalidation.addValidator(&quot;number&quot;, [\n  {validate: &quot;isTrue&quot;, value: v => _.isNumber(v), message: &quot;must be a number&quot;, stopValidationChainIfFail: true},\n  // option {integer: true}\n  {if: &quot;$integer&quot;, validate: &quot;isTrue&quot;, value: v => _.isInteger(v), message: &quot;must be an integer&quot;, stopValidationChainIfFail: true},\n  // option {min: aNumber}\n  {if: &quot;_.isNumber($min)&quot;, validate: &quot;isTrue&quot;, value: &quot;$value >= $min&quot;, message: &quot;must be at least \\${$min}&quot;},\n  // option {greaterThan: aNumber}\n  {if: &quot;_.isNumber($greaterThan)&quot;, validate: &quot;isTrue&quot;, value: &quot;$value > $greaterThan&quot;, message: &quot;must be greater than \\${$greaterThan}&quot;},\n  // option {max: aNumber}\n  {if: &quot;_.isNumber($max)&quot;, validate: &quot;isTrue&quot;, value: &quot;$value <= $max&quot;, message: &quot;must be no more than \\${$max}&quot;},\n  // option {lessThan: aNumber}\n  {if: &quot;_.isNumber($lessThan)&quot;, validate: &quot;isTrue&quot;, value: &quot;$value < $lessThan&quot;, message: &quot;must be less than \\${$lessThan}&quot;},\n  // option {even: true}\n  {if: &quot;$even&quot;, validate: &quot;isTrue&quot;, value: v => v % 2 === 0, message: &quot;must be an even number&quot;},\n  // option {odd: true}\n  {if: &quot;$odd&quot;, validate: &quot;isTrue&quot;, value: v => v % 2 === 1, message: &quot;must be an odd number&quot;}\n]);\n\n// {validate: 'string', minLength: 4, maxLength: 8}\nvalidation.addValidator(&quot;string&quot;, [\n  {validate: &quot;isTrue&quot;, value: v => _.isString(v), message: &quot;must be a string&quot;, stopValidationChainIfFail: true},\n  {if: &quot;$minLength&quot;, validate: &quot;isTrue&quot;, value: &quot;_.size($value) >= $minLength&quot;, message: &quot;must have at least \\${$minLength} characters&quot;},\n  {if: &quot;$maxLength&quot;, validate: &quot;isTrue&quot;, value: &quot;_.size($value) <= $maxLength&quot;, message: &quot;must be no more than \\${$maxLength} characters&quot;}\n]);\n\n// {validate: 'within', items: [ ... ]}\nvalidation.addValidator(&quot;within&quot;, {validate: &quot;isTrue&quot;, value: &quot;_.includes($items, $value)&quot;, message: &quot;must be one of \\${_.join($items, ', ')}&quot;});\n\n// {validate: 'notIn', items: [ ... ]}\nvalidation.addValidator(&quot;notIn&quot;, {validate: &quot;isFalse&quot;, value: &quot;_.includes($items, $value)&quot;, message: &quot;must not be one of \\${_.join($items, ', ')}&quot;});\n\n// {validate: 'contain', item: obj, /* or items: [...] */}\nvalidation.addValidator(&quot;contain&quot;, [\n  {if: &quot;$item&quot;, validate: &quot;isTrue&quot;, value: &quot;_.includes($value, $item)&quot;, message: &quot;must contain \\${$item}&quot;},\n  {if: &quot;$items&quot;, validate: &quot;isBlank&quot;, value: &quot;_.difference($items, $value)&quot;, message: &quot;missing \\${_.difference($items, $value).join(', ')}&quot;},\n]);\n\n// {validate: 'password', minLength: 4, maxLength: 8, alphabet: true, mixCase: true, digit: true, specialChar: true}\nvalidation.addValidator(&quot;password&quot;, [\n  // min/maxLength options would be passed through in scope, do not need explicit passing to string validator\n  {validate: 'string'},\n  {if: '$alphabet', validate: &quot;isTrue&quot;, value: /[a-z]/i, message: 'must contain alphabet letter'},\n  {if: '$mixCase', group: [{validate: &quot;isTrue&quot;, value: /[a-z]/}, {validate: &quot;isTrue&quot;, value: /[A-Z]/}], message: 'must contain both lower case and upper case letters'},\n  {if: '$digit', validate: /[0-9]/, message: 'must contain number'},\n  {if: '$specialChar', validate: /[!@#$%^&*()\\-_=+\\[\\]{}\\\\|;:'&quot;,<.>\\/?]/, message: 'must contain special character (like !@$%)'},\n]);\n\n// email regex from https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\nvalidation.addValidator(&quot;email&quot;, {validate: &quot;isTrue&quot;, value: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n           message: &quot;not a valid email&quot;});\n\n// unique. need to access neighbours\n// option items is evaluated from current scope\nvalidation.addValidator(&quot;unique&quot;, {validate: &quot;notIn&quot;, &quot;items.bind&quot;: &quot;$neighbourValues&quot;, message: &quot;must be unique&quot;});\n\" mode=\"js\"></code-viewer></div></template>"}),define("text!reference/switch-transformer.html",["module"],function(e){e.exports="<template><h1 id=\"switch-transformer\">switch transformer</h1>\n<div><code-viewer value=\"var rule = {\n  value: { // following switch is a rule applied to field 'value'\n    'switch': 'type',\n    'cases': {\n      'string': ['mandatory', {validate: 'string', minLength: 4}],\n      'number': ['notMandatory', {validate: 'number', min: 10}]\n    },\n    // default is optional, if no case matches, run default rule\n    'default': 'mandatory'\n  }\n};\n\nvalidation.validate({value: 'on', type: 'string'}, rule);\n// => { value: [ 'must have at least 4 characters' ] }\n\nvalidation.validate({value: 5, type: 'number'}, rule);\n// => { value: [ 'must be at least 10' ] }\" mode=\"js\"></code-viewer></div>\n\n<p><code>switch</code> transformer can also be used in nested context, it&#39;s smart enough to figure out the context. Following rule can produce exact same error.</p>\n<div><code-viewer value=\"var rule = { // following switch is a rule in nested context\n  'switch': 'type', // type is in nested context now\n  'cases': {\n    'string': {\n      // nested rule\n      value: ['mandatory', {validate: 'string', minLength: 4}]\n    },\n    'number': {\n      // nested rule\n      value: ['notMandatory', {validate: 'number', min: 10}]\n    }\n  },\n  // default is optional, if no case matches, run default rule\n  'default': {\n    value: 'mandatory'\n  }\n};\n\nvalidation.validate({value: 'on', type: 'string'}, rule);\n// => { value: [ 'must have at least 4 characters' ] }\n\nvalidation.validate({value: 5, type: 'number'}, rule);\n// => { value: [ 'must be at least 10' ] }\" mode=\"js\"></code-viewer></div>\n\n<p>The &quot;switch&quot; key accepts either expression or function. The result of the expression/function must be a string, which is used for &quot;cases&quot; lookup.</p>\n<blockquote>\n<p>Without <code>switch</code> transformer, you still can use multiple &quot;if&quot; conditional rules to do the same thing.</p>\n</blockquote>\n<blockquote>\n<p>The only reason for using &quot;readyToUse&quot; mode to implement <code>switch</code> transformer, is to smartly support both normal mode and nested mode. If cut off support of nested mode, <code>switch</code> transformer can be implemented in normal transformer by simply reusing <code>if</code> transformer.</p>\n</blockquote>\n<p>Let&#39;s move on to <a href=\"#/reference/foreach-transformer\">the foreach transformer</a>.</p>\n</template>"}),define("text!reference/transformer-rule.html",["module"],function(e){e.exports='<template><h2 id="transformer-rule">Transformer rule</h2>\n<p><code>bcx-validation</code> uses transformer to simplify the shape of the rule. You will rarely need to define a new transformer. But if you understand it, a new type of transformer can provide you maximum flexibility.</p>\n<p>We have learnt <code>if</code> transformer in conditional validation. Let&#39;s define a new <code>ifNot</code> transformer by reusing <code>if</code> transformer.</p>\n<div><code-viewer value="const ifNotTester = rule => (rule && _.isString(rule.ifNot) && !_.isEmpty(_.omit(rule, \'ifNot\')));\n\nvalidation.addTransformer(\n  ifNotTester,\n  rule => {\n    const {ifNot, ...others} = rule;\n    return {if: `!(\\${ifNot})`, ...others};\n  }\n);" mode="js"></code-viewer></div>\n\n<p>The first argument for addTransformer is a tester function, it tests whether a rule can be processed by <code>ifNot</code> transformer. You would like to design the tester as defensive as possible to avoid false hit.</p>\n<p>The second argument is the transformer function itself, with the rule as input, return a transformed rule object as output. Here we rewrite the rule with <code>if</code> transformer.</p>\n<blockquote>\n<p>When <code>bcx-validation</code> resolves a rule, it recursively expands into understandable validators. Here the output of <code>ifNot</code> transformer is another rule need to be transformed by <code>if</code> transformer. There is no limit of the depth of the resolution, as long as your transformers/validators design did not end up in infinite loop.</p>\n</blockquote>\n<p>Here is another example of transformer. This is how we support bare regex as validation rule.</p>\n<div><code-viewer value="validation.validate(\'ab\', /[A-Z]/); // => [\'invalid format\']\n\n// the bare regex validator is implemented by following code\n// copied from standard-validators.js\n// transform regex\nvalidation.addTransformer(\n  _.isRegExp,\n  rule => ({validate: \'isTrue\', value: rule, message: \'invalid format\'})\n);" mode="js"></code-viewer></div>\n\n<p>In summary, for flexibility, we use transformer to accept rule not matching the shape requirement (<code>{validate: &quot;validatorName&quot;, ...}</code>). Have a look of all the transformers defined in <a href="#/reference/standard-validators">standard validators</a>, you should able to understand all of them except <code>switch</code> and <code>foreach</code> transformers.</p>\n<blockquote>\n<p>When <code>bcx-validation</code> resolves a rule, it tests against all transformers before trying any validator implementations. That&#39;s how <code>{if: &#39;condition&#39;, validate: &#39;isTrue&#39;}</code> is processed by <code>if</code> transformer first. If <code>bcx-validation</code> tries validators before transformers, <code>{if: &#39;condition&#39;, validate: &#39;isTrue&#39;}</code> will be wrongly treated as &quot;isTrue&quot; validator with option &quot;if&quot; with static value &quot;condition&quot;.</p>\n</blockquote>\n<blockquote>\n<p><code>switch</code> and <code>foreach</code> transformers are different, they are &quot;readyToUse&quot; transformer. As for now, we would not document how to implement a &quot;readyToUse&quot; transformer, it involves understanding how <code>bcx-validation</code> internally uses aurelia-binding scope. We will just document the usage of <code>switch</code> and <code>foreach</code> transformers, they are quite useful.</p>\n</blockquote>\n<p>Let&#39;s move on to <a href="#/reference/switch-transformer">the switch transformer</a>.</p>\n</template>'}),define("text!reference/validator-composition.html",["module"],function(e){e.exports="<template><h1 id=\"define-new-validator-with-composition\">Define new validator with composition</h1>\n<p>In <code>bcx-validation</code>&#39;s <a href=\"#/reference/standard-validators\">standard validators</a>, only 5 validators are implemented with function. They are <code>&quot;isTrue&quot;</code>, <code>&quot;isFalse&quot;</code>, <code>&quot;skipImmediatelyIf&quot;</code>, <code>&quot;passImmediatelyIf&quot;</code> and <code>&quot;failImmediatelyIf&quot;</code>. All other validators are implemented with composition.</p>\n<p>Composition is the best part of <code>bcx-validation</code>.</p>\n<p>Even &quot;isFalse&quot; validator can be implemented with composition from &quot;isTrue&quot;. Let&#39;s replace the standard &quot;isFalse&quot; validator.</p>\n<div><code-viewer value=\"validation.validate(true, 'isFalse'); // => [ 'must be false' ]\nvalidation.addValidator(\n  'isFalse',\n  {validate: 'isTrue', value: '!$value', message: 'false is what I want'}\n);\nvalidation.validate(true, 'isFalse'); // => [ 'false is what I want' ]\" mode=\"js\"></code-viewer></div>\n\n<p>Value override and error message override still work.</p>\n<div><code-viewer value=\"validation.validate('hello', {validate: 'isFalse', value: '$value.length > 4', message: 'cannot be longer than 4 chars'});\n// => [ 'cannot be longer than 4 chars' ]\" mode=\"js\"></code-viewer></div>\n\n<p>You see we reimplemented &quot;isFalse&quot; validator by reusing &quot;isTrue&quot; validator with value override <code>&quot;!$value&quot;</code> and error message override <code>&quot;false is what I want&quot;</code>.</p>\n<blockquote>\n<p><code>bcx-validation</code> implemented the default &quot;isFalse&quot; validator with function instead of composition for slightly better performance. Because &quot;isTrue&quot; and &quot;isFalse&quot; are heavily used by other validators implemented with composition, we want to squeeze the performance little bit.</p>\n</blockquote>\n<blockquote>\n<p>with <code>validation.addValidator(name, composition_or_function)</code>, if you want, you can replace any of the standard validators.</p>\n</blockquote>\n<p>Let&#39;s implement a new validator with composition of chain. Let&#39;s call it &quot;myToken&quot;.</p>\n<div><code-viewer value=\"validation.addValidator('myToken', [\n  {validate: /[a-z]/, message: 'must contain lower case letter', stopValidationChainIfFail: true},\n  {validate: /[A-Z]/, message: 'must contain upper case letter', stopValidationChainIfFail: true},\n  {validate: /\\d/, message: 'must contain digit'}\n]);\nvalidation.validate('a', 'myToken');\n// => [ 'must contain upper case letter' ]\" mode=\"js\"></code-viewer></div>\n\n<p>That is the basic form of validator composition, but it would be nicer if it supports flexible options. What about using options to turn on every parts of &quot;myToken&quot; validator.</p>\n<div><code-viewer value=\"validation.addValidator('myToken', [\n  {if: '$lowerCase', validate: /[a-z]/, message: 'must contain lower case letter', stopValidationChainIfFail: true},\n  {if: '$upperCase',validate: /[A-Z]/, message: 'must contain upper case letter', stopValidationChainIfFail: true},\n  {if: '$digit', validate: /\\d/, message: 'must contain digit'}\n]);\nvalidation.validate('a', 'myToken'); // nothing turned on, checks nothing.\n// => undefined\nvalidation.validate('a', {validate: 'myToken', upperCase: true, digit: true}); // turned on upperCase and digit\n// => [ 'must contain upper case letter' ]\nvalidation.validate('a', {validate: 'myToken', digit: true}); // turned on digit\n// => [ 'must contain digit' ]\" mode=\"js\"></code-viewer></div>\n\n<blockquote>\n<p>Note when only &quot;digit&quot; option was turned on, the first two rules on lowerCase/upperCase were skipped, not considered failed, so <code>stopValidationChainIfFail</code> on them has no effect. Exactly what we want.</p>\n</blockquote>\n<p>If <code>bcx-validation</code> sees a unknown key, it treats it as option. For <code>{validate: &quot;myToken&quot;, upperCase: true, digit: true}</code>, it sees two options: &quot;upperCase&quot; and &quot;digit&quot;, creates two special context variable <code>$upperCase</code> and <code>$digit</code> with their static value (both <code>true</code> in this case). That&#39;s how you can use them inside <code>if</code> condition.</p>\n<blockquote>\n<p>For <code>{validate: &quot;myToken&quot;, upperCase: true, digit: true}</code>, option <code>$lowerCase</code> was not created by <code>bcx-validation</code>, it&#39;s an unused option, treated as undefined in expression. <code>if: &quot;$lowerCase&quot;</code> still works as expected.</p>\n</blockquote>\n<blockquote>\n<p>You can also use those special context variables in value override, message override.</p>\n</blockquote>\n<blockquote>\n<p>There is no pre definition required for any option to work.</p>\n</blockquote>\n<p>Let&#39;s have a look of the source code for standard &quot;number&quot; validator.</p>\n<div><code-viewer value=\"// copied from standard-validators.js\n// {validate: 'number', integer: true, min: 0, max: 10, greaterThan: 0, lessThan: 10, even: true, /* odd: true */}\nvalidation.addValidator('number', [\n  {validate: 'isTrue', value: v => _.isNumber(v), message: 'must be a number', stopValidationChainIfFail: true},\n  // option {integer: true}\n  {if: '$integer', validate: 'isTrue', value: v => _.isInteger(v), message: 'must be an integer', stopValidationChainIfFail: true},\n  // option {min: aNumber}\n  {if: '_.isNumber($min)', validate: 'isTrue', value: '$value >= $min', message: 'must be at least \\${$min}'},\n  // option {greaterThan: aNumber}\n  {if: '_.isNumber($greaterThan)', validate: 'isTrue', value: '$value > $greaterThan', message: 'must be greater than \\${$greaterThan}'},\n  // option {max: aNumber}\n  {if: '_.isNumber($max)', validate: 'isTrue', value: '$value <= $max', message: 'must be no more than \\${$max}'},\n  // option {lessThan: aNumber}\n  {if: '_.isNumber($lessThan)', validate: 'isTrue', value: '$value < $lessThan', message: 'must be less than \\${$lessThan}'},\n  // option {even: true}\n  {if: '$even', validate: 'isTrue', value: v => v % 2 === 0, message: 'must be an even number'},\n  // option {odd: true}\n  {if: '$odd', validate: 'isTrue', value: v => v % 2 === 1, message: 'must be an odd number'}\n]);\" mode=\"js\"></code-viewer></div>\n\n<p>It supports 7 optional options, <code>&quot;integer&quot;</code>, <code>&quot;min&quot;</code>, <code>&quot;max&quot;</code>, <code>&quot;greaterThan&quot;</code>, <code>&quot;lessThan&quot;</code>, <code>&quot;even&quot;</code> and <code>&quot;odd&quot;</code>. User can use any combination or none. You might noticed we used some function (not expression) as value override in &quot;number&quot; validator, that&#39;s for slightly better performance. But when the value override needs to access option, we use expression, as using function to access option is bit too verbose.</p>\n<p>Have a look of all the validators defined in <a href=\"#/reference/standard-validators\">standard validators</a>, most of them should be pretty easy to understand now.</p>\n<p>We have learnt how to use validator composition to easily use options. Let&#39;s revisit the validator &quot;atLeast8Chars&quot; that defined with function. I talked about it would be nicer to support a &quot;length&quot; option instead of fixed condition. Here is how you do it.</p>\n<div><code-viewer value=\"validation.addValidator('atLeast', (value, propertyPath, context, get) => {\n  const length = get('$length') || 8; // default to 8\n\n  if (!(value && value.length >= length)) {\n    return `must be at least \\${length} characters long`\n  }\n});\n\nvalidation.validate('abc', 'atLeast');\n// => ['must be at least 8 characters long']\nvalidation.validate('abc', {validate: 'atLeast', length: 2});\n// => undefined\nvalidation.validate('a', {validate: 'atLeast', length: 2});\n// => ['must be at least 2 characters long']\" mode=\"js\"></code-viewer></div>\n\n<p>Just use the <code>get</code> function to retrieve any value out of current scope. Underneath, it evaluates an expression against the current scope.</p>\n<blockquote>\n<p>With <code>get(&quot;$value&quot;)</code>, <code>get(&quot;$propertyPath&quot;)</code> and <code>get(&quot;$this&quot;)</code>, you can get the same value for first 3 arguments (value, propertyPath and context).</p>\n</blockquote>\n<p>In the example in <a href=\"#/reference/intro\">introduction</a>, there is an interesting usage of option &quot;min&quot; in &quot;number&quot; validator.</p>\n<div><code-viewer value=\"{validate: 'number', 'min.bind': 'ageLimit', message: '\\${$parent.name} must be at least \\${ageLimit} years old'}]\" mode=\"js\"></code-viewer></div>\n\n<p>If you use special option name <code>&quot;min.bind&quot;</code>, <code>bcx-validation</code> will evaluate expression <code>&quot;ageLimit&quot;</code> against current scope, then use the value (value is 21, as defined in parent context) as the option <code>&quot;min&quot;</code>&#39;s value.</p>\n<blockquote>\n<p>Note that we didn&#39;t use parent context explicitly in the expression. <code>&quot;$parent.ageLimit&quot;</code> works same, but since it&#39;s not ambiguous, <code>&quot;ageLimit&quot; works just fine. This is an aurelia-binding feature which</code>bcx-expression-evaluator` inherited.</p>\n</blockquote>\n<blockquote>\n<p>Note in error message override, <code>&quot;$parent.name&quot;</code> is needed since <code>&quot;name&quot;</code> is ambiguous. <code>&quot;name&quot;</code> will be resulted to current customer name.</p>\n</blockquote>\n<p>Let&#39;s move on to <a href=\"#/reference/nested-rule\">nested rule</a>.</p>\n</template>"}),define("resources/binding-behaviors/number",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.NumberBindingBehavior=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.bind=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(!e.updateSource||!e.updateTarget)throw new Error("leftClick binding behavior only supports two-way binding.");e.originalUpdateSource=e.updateSource,e.originalUpdateTarget=e.updateTarget,e.options=n,e.updateSource=o,e.updateTarget=a},e.prototype.unbind=function(e,t){e.updateSource=e.originalUpdateSource,e.updateTarget=e.originalUpdateTarget,delete e.options,delete e.targetNumber,delete e.originalUpdateSource,delete e.originalUpdateTarget},e}();function o(e){for(var t=e?e.trim():"",n=[],o=0,a=t.length;o<a;o+=1){var i=t[o];("0"<=i&&i<="9"||this.options.allowNegative&&"-"===i&&0===o||!this.options.integerOnly&&"."===i&&t.indexOf(".")===o)&&n.push(i)}var r=n.join("");e!==r&&this.originalUpdateTarget(r);var s=parseFloat(r);s=Number.isFinite(s)?s:null,this.targetNumber=s,this.originalUpdateSource(s)}function a(e){var t=Number.isFinite(e)?e.toString():"";e!==this.targetNumber&&this.originalUpdateTarget(t)}}),define("resources/elements/form-field",["exports","aurelia-framework"],function(e,t){"use strict";function n(e,t,n,o){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(o):void 0})}function o(n,o,e,t,a){var i={};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=e.slice().reverse().reduce(function(e,t){return t(n,o,e)||e},i),a&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(a):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(n,o,i),i=null),i}var a,i,r,s,l,d,u,c,m,p,f;Object.defineProperty(e,"__esModule",{value:!0}),e.FormField=void 0;e.FormField=(a=(0,t.bindable)({defaultBindingMode:t.bindingMode.twoWay}),r=o((i=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,"label",r,this),n(this,"placeholder",s,this),n(this,"type",l,this),n(this,"value",d,this),n(this,"errors",u,this),n(this,"warnings",c,this),n(this,"options",m,this),n(this,"integerOnly",p,this),n(this,"allowNegative",f,this)}).prototype,"label",[t.bindable],{enumerable:!0,initializer:function(){return""}}),s=o(i.prototype,"placeholder",[t.bindable],{enumerable:!0,initializer:function(){return""}}),l=o(i.prototype,"type",[t.bindable],{enumerable:!0,initializer:function(){return"string"}}),d=o(i.prototype,"value",[a],{enumerable:!0,initializer:null}),u=o(i.prototype,"errors",[t.bindable],{enumerable:!0,initializer:null}),c=o(i.prototype,"warnings",[t.bindable],{enumerable:!0,initializer:null}),m=o(i.prototype,"options",[t.bindable],{enumerable:!0,initializer:null}),p=o(i.prototype,"integerOnly",[t.bindable],{enumerable:!0,initializer:function(){return!1}}),f=o(i.prototype,"allowNegative",[t.bindable],{enumerable:!0,initializer:function(){return!1}}),i)}),define("text!resources/elements/form-field.html",["module"],function(e){e.exports='<template class="form-field ${errors ? \'in-valid\' : \'\'} ${warnings && !errors ? \'warning\' : \'\'}">\n  <label>\n    <input if.bind="type === \'boolean\'"\n           type="checkbox"\n           checked.bind="value">\n    ${label}\n  </label>\n\n  <input if.bind="type === \'string\'"\n         type="text"\n         value.bind="value"\n         placeholder.bind="placeholder">\n\n  <input if.bind="type === \'password\'"\n         type="password"\n         value.bind="value"\n         placeholder.bind="placeholder">\n\n  \x3c!-- binding-behavior "number" is used for number input --\x3e\n  <input if.bind="type === \'number\'"\n         type="text"\n         value.bind="value & number:{integerOnly: integerOnly, allowNegative: allowNegative}"\n         placeholder.bind="placeholder">\n\n  <textarea if.bind="type === \'text\'"\n            rows="5"\n            value.bind="value"\n            placeholder.bind="placeholder"></textarea>\n\n  <select if.bind="type === \'select\'" value.bind="value">\n    \x3c!-- options supports [\'a\', \'b\']\n         or [{value: \'a\', label: \'A\'}, {value: \'b\', label: \'B\'}] --\x3e\n    <option repeat.for="option of options"\n            model.bind="option.value || option">\n      ${option.label || option}\n    </option>\n  </select>\n\n  <div class="field-error" repeat.for="err of errors">${err}</div>\n  <div class="field-warning" repeat.for="warn of warnings">${warn}</div>\n</template>\n'}),define("resources/index",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.configure=function(e){e.globalResources(["./elements/form-field","./value-converters/json","./binding-behaviors/number"])}}),define("resources/value-converters/json",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.JsonValueConverter=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.toView=function(e,t){return JSON.stringify(e,null,t)},e}()}),define("text!tutorial/intro.html",["module"],function(e){e.exports='<template><h1 id="bcx-validation">bcx-validation</h1>\n<p>Alternative way to do validation in Aurelia app, simple and flexible.</p>\n<p>Different from official <a href="https://github.com/aurelia/validation"><code>aurelia-validation</code></a> and almost all other validation libs out there, we have a different naive view on validation.</p>\n<blockquote>\n<p>Validation is a function that takes <code>model</code> (not just key-val pairs) and <code>rule</code> as input, produces a structured <code>errors</code> (we will see shortly why we use plural) object as output. No more and no less.</p>\n</blockquote>\n<p>Enough talking, let&#39;s look at first example.</p>\n<compose view-model="../examples/e1-introduction/index"></compose>\n\n<p>I will explain bit more after this first example, I promise you won&#39;t see any excessive explanation from next page on.</p>\n<h2 id="bcx-validation-is-generic">bcx-validation is generic</h2>\n<p>The first thing you can see from the above simple example is that <strong><code>bcx-validation</code> is a generic validation tool</strong>. We show all our tutorial examples in <a href="https://aurelia.io">Aurelia</a>, because Aurelia rocks.</p>\n<blockquote>\n<p>Aurelia&#39;s dependency injection and two-way binding makes integrating bcx-validation very intuitive without excessive boilerplate.</p>\n</blockquote>\n<p>The entry is a class <code>Validation</code>, we use class to allow user to customise (adding helper, implement new validator) before validate.</p>\n<p>To isolate your customisation, it&#39;s recommended to register it as transient in Aurelia DI container.</p>\n<div><code-viewer value="// in your main.js\nimport Validation from \'bcx-validation\';\n\nexport function configure(aurelia) {\n  // ...\n  aurelia.use.transient(Validation); // or aurelia.container.registerTransient(Validation);\n  // ...\n}" mode="js"></code-viewer></div>\n\n<h2 id="structure-of-errors">Structure of <code>errors</code></h2>\n<p>Play the above example, you can see a basic structure of the <code>errors</code> object,</p>\n<div><code-viewer value="{\n  &quot;name&quot;: [&quot;must not be empty&quot;],\n  &quot;email&quot;: [&quot;must not be empty&quot;]\n}" mode="js"></code-viewer></div>\n\n<p>In technical term, the rule in use is a nested rule, the <code>errors</code> result is in nested format accordingly.</p>\n<p>For every field, for instance <code>name</code> field, the <code>errors</code> of <code>name</code> is an array of failure messages. Here we only have one message, but there could be more errors messages if more validation rules were applied on <code>name</code> field.</p>\n<p>Next example <a href="#/tutorial/foreach-and-nested">foreach-and-nested</a> showcases flexibility.</p>\n</template>'}),define("utils/fake-save",["exports"],function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){return new Promise(function(e,t){setTimeout(function(){e({message:"Saved "+JSON.stringify(n,null,2)})},200)})}}),define("text!wip.html",["module"],function(e){e.exports='<template><h1 id="wip-">WIP :-)</h1>\n</template>'}),define("app.js",["app"],function(e){return e}),define("environment.js",["environment"],function(e){return e}),define("examples/e1-introduction/index.js",["examples/e1-introduction/index"],function(e){return e}),define("examples/e1-introduction/simple-form.js",["examples/e1-introduction/simple-form"],function(e){return e}),define("examples/e10-validator-composition/index.js",["examples/e10-validator-composition/index"],function(e){return e}),define("examples/e10-validator-composition/simple-form.js",["examples/e10-validator-composition/simple-form"],function(e){return e}),define("examples/e11-validator-function/index.js",["examples/e11-validator-function/index"],function(e){return e}),define("examples/e11-validator-function/simple-form.js",["examples/e11-validator-function/simple-form"],function(e){return e}),define("examples/e2-foreach-and-nested/index.js",["examples/e2-foreach-and-nested/index"],function(e){return e}),define("examples/e2-foreach-and-nested/simple-form.js",["examples/e2-foreach-and-nested/simple-form"],function(e){return e}),define("examples/e3-number-and-conditional/index.js",["examples/e3-number-and-conditional/index"],function(e){return e}),define("examples/e3-number-and-conditional/simple-form.js",["examples/e3-number-and-conditional/simple-form"],function(e){return e}),define("examples/e4-email-and-password/index.js",["examples/e4-email-and-password/index"],function(e){return e}),define("examples/e4-email-and-password/simple-form.js",["examples/e4-email-and-password/simple-form"],function(e){return e}),define("examples/e5-foreach-switch-and-customise/index.js",["examples/e5-foreach-switch-and-customise/index"],function(e){return e}),define("examples/e5-foreach-switch-and-customise/simple-form.js",["examples/e5-foreach-switch-and-customise/simple-form"],function(e){return e}),define("examples/e6-foreach-and-conditional/index.js",["examples/e6-foreach-and-conditional/index"],function(e){return e}),define("examples/e6-foreach-and-conditional/simple-form.js",["examples/e6-foreach-and-conditional/simple-form"],function(e){return e}),define("examples/e7-i18n/index.js",["examples/e7-i18n/index"],function(e){return e}),define("examples/e7-i18n/simple-form.js",["examples/e7-i18n/simple-form"],function(e){return e}),define("examples/e8-merge-server-side-error/index.js",["examples/e8-merge-server-side-error/index"],function(e){return e}),define("examples/e8-merge-server-side-error/simple-form.js",["examples/e8-merge-server-side-error/simple-form"],function(e){return e}),define("examples/e9-warnings-and-errors/index.js",["examples/e9-warnings-and-errors/index"],function(e){return e}),define("examples/e9-warnings-and-errors/simple-form.js",["examples/e9-warnings-and-errors/simple-form"],function(e){return e}),define("main.js",["main"],function(e){return e}),define("resources",["resources/index"],function(e){return e}),define("resources.js",["resources"],function(e){return e}),define("resources/binding-behaviors/number.js",["resources/binding-behaviors/number"],function(e){return e}),define("resources/elements/form-field.js",["resources/elements/form-field"],function(e){return e}),define("resources/index.js",["resources/index"],function(e){return e}),define("resources/value-converters/json.js",["resources/value-converters/json"],function(e){return e}),define("utils/fake-save.js",["utils/fake-save"],function(e){return e});